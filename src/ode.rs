/* automatically generated by rust-bindgen */

pub const _LIBC_LIMITS_H_: ::std::os::raw::c_uint = 1;
pub const _FEATURES_H: ::std::os::raw::c_uint = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uint = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uint = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uint = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_MISC: ::std::os::raw::c_uint = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uint = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uint = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201505;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uint = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uint = 6;
pub const __GLIBC__: ::std::os::raw::c_uint = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uint = 24;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uint = 1;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uint = 64;
pub const MB_LEN_MAX: ::std::os::raw::c_uint = 16;
pub const _BITS_POSIX1_LIM_H: ::std::os::raw::c_uint = 1;
pub const _POSIX_AIO_LISTIO_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX_AIO_MAX: ::std::os::raw::c_uint = 1;
pub const _POSIX_ARG_MAX: ::std::os::raw::c_uint = 4096;
pub const _POSIX_CHILD_MAX: ::std::os::raw::c_uint = 25;
pub const _POSIX_DELAYTIMER_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_HOST_NAME_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_LINK_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_LOGIN_NAME_MAX: ::std::os::raw::c_uint = 9;
pub const _POSIX_MAX_CANON: ::std::os::raw::c_uint = 255;
pub const _POSIX_MAX_INPUT: ::std::os::raw::c_uint = 255;
pub const _POSIX_MQ_OPEN_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_MQ_PRIO_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const _POSIX_NGROUPS_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_OPEN_MAX: ::std::os::raw::c_uint = 20;
pub const _POSIX_PATH_MAX: ::std::os::raw::c_uint = 256;
pub const _POSIX_PIPE_BUF: ::std::os::raw::c_uint = 512;
pub const _POSIX_RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_RTSIG_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_SEM_NSEMS_MAX: ::std::os::raw::c_uint = 256;
pub const _POSIX_SEM_VALUE_MAX: ::std::os::raw::c_uint = 32767;
pub const _POSIX_SIGQUEUE_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_SSIZE_MAX: ::std::os::raw::c_uint = 32767;
pub const _POSIX_STREAM_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_SYMLINK_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_SYMLOOP_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_TIMER_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_TTY_NAME_MAX: ::std::os::raw::c_uint = 9;
pub const _POSIX_TZNAME_MAX: ::std::os::raw::c_uint = 6;
pub const _POSIX_CLOCKRES_MIN: ::std::os::raw::c_uint = 20000000;
pub const NR_OPEN: ::std::os::raw::c_uint = 1024;
pub const NGROUPS_MAX: ::std::os::raw::c_uint = 65536;
pub const ARG_MAX: ::std::os::raw::c_uint = 131072;
pub const LINK_MAX: ::std::os::raw::c_uint = 127;
pub const MAX_CANON: ::std::os::raw::c_uint = 255;
pub const MAX_INPUT: ::std::os::raw::c_uint = 255;
pub const NAME_MAX: ::std::os::raw::c_uint = 255;
pub const PATH_MAX: ::std::os::raw::c_uint = 4096;
pub const PIPE_BUF: ::std::os::raw::c_uint = 4096;
pub const XATTR_NAME_MAX: ::std::os::raw::c_uint = 255;
pub const XATTR_SIZE_MAX: ::std::os::raw::c_uint = 65536;
pub const XATTR_LIST_MAX: ::std::os::raw::c_uint = 65536;
pub const RTSIG_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_THREAD_KEYS_MAX: ::std::os::raw::c_uint = 128;
pub const PTHREAD_KEYS_MAX: ::std::os::raw::c_uint = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 4;
pub const _POSIX_THREAD_THREADS_MAX: ::std::os::raw::c_uint = 64;
pub const AIO_PRIO_DELTA_MAX: ::std::os::raw::c_uint = 20;
pub const PTHREAD_STACK_MIN: ::std::os::raw::c_uint = 16384;
pub const DELAYTIMER_MAX: ::std::os::raw::c_uint = 2147483647;
pub const TTY_NAME_MAX: ::std::os::raw::c_uint = 32;
pub const LOGIN_NAME_MAX: ::std::os::raw::c_uint = 256;
pub const HOST_NAME_MAX: ::std::os::raw::c_uint = 64;
pub const MQ_PRIO_MAX: ::std::os::raw::c_uint = 32768;
pub const SEM_VALUE_MAX: ::std::os::raw::c_uint = 2147483647;
pub const _BITS_POSIX2_LIM_H: ::std::os::raw::c_uint = 1;
pub const _POSIX2_BC_BASE_MAX: ::std::os::raw::c_uint = 99;
pub const _POSIX2_BC_DIM_MAX: ::std::os::raw::c_uint = 2048;
pub const _POSIX2_BC_SCALE_MAX: ::std::os::raw::c_uint = 99;
pub const _POSIX2_BC_STRING_MAX: ::std::os::raw::c_uint = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX2_EXPR_NEST_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX2_LINE_MAX: ::std::os::raw::c_uint = 2048;
pub const _POSIX2_RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const BC_BASE_MAX: ::std::os::raw::c_uint = 99;
pub const BC_DIM_MAX: ::std::os::raw::c_uint = 2048;
pub const BC_SCALE_MAX: ::std::os::raw::c_uint = 99;
pub const BC_STRING_MAX: ::std::os::raw::c_uint = 1000;
pub const COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 255;
pub const EXPR_NEST_MAX: ::std::os::raw::c_uint = 32;
pub const LINE_MAX: ::std::os::raw::c_uint = 2048;
pub const CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 2048;
pub const RE_DUP_MAX: ::std::os::raw::c_uint = 32767;
pub const _STDIO_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPESIZES_H: ::std::os::raw::c_uint = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::std::os::raw::c_uint = 1;
pub const __INO_T_MATCHES_INO64_T: ::std::os::raw::c_uint = 1;
pub const __FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const __FILE_defined: ::std::os::raw::c_uint = 1;
pub const ____FILE_defined: ::std::os::raw::c_uint = 1;
pub const _G_config_h: ::std::os::raw::c_uint = 1;
pub const ____mbstate_t_defined: ::std::os::raw::c_uint = 1;
pub const _G_HAVE_MMAP: ::std::os::raw::c_uint = 1;
pub const _G_HAVE_MREMAP: ::std::os::raw::c_uint = 1;
pub const _G_IO_IO_FILE_VERSION: ::std::os::raw::c_uint = 131073;
pub const _G_BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const _IO_BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const __GNUC_VA_LIST: ::std::os::raw::c_uint = 1;
pub const _IO_UNIFIED_JUMPTABLES: ::std::os::raw::c_uint = 1;
pub const EOF: ::std::os::raw::c_int = -1;
pub const _IOS_INPUT: ::std::os::raw::c_uint = 1;
pub const _IOS_OUTPUT: ::std::os::raw::c_uint = 2;
pub const _IOS_ATEND: ::std::os::raw::c_uint = 4;
pub const _IOS_APPEND: ::std::os::raw::c_uint = 8;
pub const _IOS_TRUNC: ::std::os::raw::c_uint = 16;
pub const _IOS_NOCREATE: ::std::os::raw::c_uint = 32;
pub const _IOS_NOREPLACE: ::std::os::raw::c_uint = 64;
pub const _IOS_BIN: ::std::os::raw::c_uint = 128;
pub const _IO_MAGIC: ::std::os::raw::c_uint = 4222418944;
pub const _OLD_STDIO_MAGIC: ::std::os::raw::c_uint = 4206624768;
pub const _IO_MAGIC_MASK: ::std::os::raw::c_uint = 4294901760;
pub const _IO_USER_BUF: ::std::os::raw::c_uint = 1;
pub const _IO_UNBUFFERED: ::std::os::raw::c_uint = 2;
pub const _IO_NO_READS: ::std::os::raw::c_uint = 4;
pub const _IO_NO_WRITES: ::std::os::raw::c_uint = 8;
pub const _IO_EOF_SEEN: ::std::os::raw::c_uint = 16;
pub const _IO_ERR_SEEN: ::std::os::raw::c_uint = 32;
pub const _IO_DELETE_DONT_CLOSE: ::std::os::raw::c_uint = 64;
pub const _IO_LINKED: ::std::os::raw::c_uint = 128;
pub const _IO_IN_BACKUP: ::std::os::raw::c_uint = 256;
pub const _IO_LINE_BUF: ::std::os::raw::c_uint = 512;
pub const _IO_TIED_PUT_GET: ::std::os::raw::c_uint = 1024;
pub const _IO_CURRENTLY_PUTTING: ::std::os::raw::c_uint = 2048;
pub const _IO_IS_APPENDING: ::std::os::raw::c_uint = 4096;
pub const _IO_IS_FILEBUF: ::std::os::raw::c_uint = 8192;
pub const _IO_BAD_SEEN: ::std::os::raw::c_uint = 16384;
pub const _IO_USER_LOCK: ::std::os::raw::c_uint = 32768;
pub const _IO_FLAGS2_MMAP: ::std::os::raw::c_uint = 1;
pub const _IO_FLAGS2_NOTCANCEL: ::std::os::raw::c_uint = 2;
pub const _IO_FLAGS2_USER_WBUF: ::std::os::raw::c_uint = 8;
pub const _IO_SKIPWS: ::std::os::raw::c_uint = 1;
pub const _IO_LEFT: ::std::os::raw::c_uint = 2;
pub const _IO_RIGHT: ::std::os::raw::c_uint = 4;
pub const _IO_INTERNAL: ::std::os::raw::c_uint = 8;
pub const _IO_DEC: ::std::os::raw::c_uint = 16;
pub const _IO_OCT: ::std::os::raw::c_uint = 32;
pub const _IO_HEX: ::std::os::raw::c_uint = 64;
pub const _IO_SHOWBASE: ::std::os::raw::c_uint = 128;
pub const _IO_SHOWPOINT: ::std::os::raw::c_uint = 256;
pub const _IO_UPPERCASE: ::std::os::raw::c_uint = 512;
pub const _IO_SHOWPOS: ::std::os::raw::c_uint = 1024;
pub const _IO_SCIENTIFIC: ::std::os::raw::c_uint = 2048;
pub const _IO_FIXED: ::std::os::raw::c_uint = 4096;
pub const _IO_UNITBUF: ::std::os::raw::c_uint = 8192;
pub const _IO_STDIO: ::std::os::raw::c_uint = 16384;
pub const _IO_DONT_CLOSE: ::std::os::raw::c_uint = 32768;
pub const _IO_BOOLALPHA: ::std::os::raw::c_uint = 65536;
pub const _IOFBF: ::std::os::raw::c_uint = 0;
pub const _IOLBF: ::std::os::raw::c_uint = 1;
pub const _IONBF: ::std::os::raw::c_uint = 2;
pub const BUFSIZ: ::std::os::raw::c_uint = 8192;
pub const SEEK_SET: ::std::os::raw::c_uint = 0;
pub const SEEK_CUR: ::std::os::raw::c_uint = 1;
pub const SEEK_END: ::std::os::raw::c_uint = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\x00";
pub const L_tmpnam: ::std::os::raw::c_uint = 20;
pub const TMP_MAX: ::std::os::raw::c_uint = 238328;
pub const FILENAME_MAX: ::std::os::raw::c_uint = 4096;
pub const L_ctermid: ::std::os::raw::c_uint = 9;
pub const FOPEN_MAX: ::std::os::raw::c_uint = 16;
pub const _STDLIB_H: ::std::os::raw::c_uint = 1;
pub const WNOHANG: ::std::os::raw::c_uint = 1;
pub const WUNTRACED: ::std::os::raw::c_uint = 2;
pub const WSTOPPED: ::std::os::raw::c_uint = 2;
pub const WEXITED: ::std::os::raw::c_uint = 4;
pub const WCONTINUED: ::std::os::raw::c_uint = 8;
pub const WNOWAIT: ::std::os::raw::c_uint = 16777216;
pub const __WNOTHREAD: ::std::os::raw::c_uint = 536870912;
pub const __WALL: ::std::os::raw::c_uint = 1073741824;
pub const __WCLONE: ::std::os::raw::c_uint = 2147483648;
pub const __W_CONTINUED: ::std::os::raw::c_uint = 65535;
pub const __WCOREFLAG: ::std::os::raw::c_uint = 128;
pub const __ldiv_t_defined: ::std::os::raw::c_uint = 1;
pub const RAND_MAX: ::std::os::raw::c_uint = 2147483647;
pub const EXIT_FAILURE: ::std::os::raw::c_uint = 1;
pub const EXIT_SUCCESS: ::std::os::raw::c_uint = 0;
pub const _SYS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const __clock_t_defined: ::std::os::raw::c_uint = 1;
pub const __time_t_defined: ::std::os::raw::c_uint = 1;
pub const __clockid_t_defined: ::std::os::raw::c_uint = 1;
pub const __timer_t_defined: ::std::os::raw::c_uint = 1;
pub const __BIT_TYPES_DEFINED__: ::std::os::raw::c_uint = 1;
pub const _ENDIAN_H: ::std::os::raw::c_uint = 1;
pub const __LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const __BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const __PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const __BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const __FLOAT_WORD_ORDER: ::std::os::raw::c_uint = 1234;
pub const LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const _BITS_BYTESWAP_H: ::std::os::raw::c_uint = 1;
pub const _SYS_SELECT_H: ::std::os::raw::c_uint = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\x00";
pub const _SIGSET_H_types: ::std::os::raw::c_uint = 1;
pub const __timespec_defined: ::std::os::raw::c_uint = 1;
pub const _STRUCT_TIMEVAL: ::std::os::raw::c_uint = 1;
pub const FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const _SYS_SYSMACROS_H: ::std::os::raw::c_uint = 1;
pub const _BITS_PTHREADTYPES_H: ::std::os::raw::c_uint = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_MUTEX_T: ::std::os::raw::c_uint = 40;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_COND_T: ::std::os::raw::c_uint = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: ::std::os::raw::c_uint = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: ::std::os::raw::c_uint = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: ::std::os::raw::c_uint = 4;
pub const __have_pthread_attr_t: ::std::os::raw::c_uint = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: ::std::os::raw::c_uint = 1;
pub const _ALLOCA_H: ::std::os::raw::c_uint = 1;
pub const _MATH_H: ::std::os::raw::c_uint = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: ::std::os::raw::c_uint = 1;
pub const _MATH_H_MATHDEF: ::std::os::raw::c_uint = 1;
pub const FP_ILOGB0: ::std::os::raw::c_int = -2147483648;
pub const FP_ILOGBNAN: ::std::os::raw::c_int = -2147483648;
pub const __MATH_DECLARING_DOUBLE: ::std::os::raw::c_uint = 1;
pub const __MATH_DECLARE_LDOUBLE: ::std::os::raw::c_uint = 1;
pub const MATH_ERRNO: ::std::os::raw::c_uint = 1;
pub const MATH_ERREXCEPT: ::std::os::raw::c_uint = 2;
pub const math_errhandling: ::std::os::raw::c_uint = 3;
pub const DOMAIN: ::std::os::raw::c_uint = 1;
pub const SING: ::std::os::raw::c_uint = 2;
pub const OVERFLOW: ::std::os::raw::c_uint = 3;
pub const UNDERFLOW: ::std::os::raw::c_uint = 4;
pub const TLOSS: ::std::os::raw::c_uint = 5;
pub const PLOSS: ::std::os::raw::c_uint = 6;
pub const M_E: f32 = 2.718281828459045;
pub const M_LOG2E: f32 = 1.4426950408889634;
pub const M_LOG10E: f32 = 0.4342944819032518;
pub const M_LN2: f32 = 0.6931471805599453;
pub const M_LN10: f32 = 2.302585092994046;
pub const M_PI: f32 = 3.141592653589793;
pub const M_PI_2: f32 = 1.5707963267948966;
pub const M_PI_4: f32 = 0.7853981633974483;
pub const M_1_PI: f32 = 0.3183098861837907;
pub const M_2_PI: f32 = 0.6366197723675814;
pub const M_2_SQRTPI: f32 = 1.1283791670955126;
pub const M_SQRT2: f32 = 1.4142135623730951;
pub const M_SQRT1_2: f32 = 0.7071067811865476;
pub const _STRING_H: ::std::os::raw::c_uint = 1;
pub const _XLOCALE_H: ::std::os::raw::c_uint = 1;
pub const X86_64_SYSTEM: ::std::os::raw::c_uint = 1;
pub const _TIME_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TIME_H: ::std::os::raw::c_uint = 1;
pub const CLOCK_REALTIME: ::std::os::raw::c_uint = 0;
pub const CLOCK_MONOTONIC: ::std::os::raw::c_uint = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: ::std::os::raw::c_uint = 2;
pub const CLOCK_THREAD_CPUTIME_ID: ::std::os::raw::c_uint = 3;
pub const CLOCK_MONOTONIC_RAW: ::std::os::raw::c_uint = 4;
pub const CLOCK_REALTIME_COARSE: ::std::os::raw::c_uint = 5;
pub const CLOCK_MONOTONIC_COARSE: ::std::os::raw::c_uint = 6;
pub const CLOCK_BOOTTIME: ::std::os::raw::c_uint = 7;
pub const CLOCK_REALTIME_ALARM: ::std::os::raw::c_uint = 8;
pub const CLOCK_BOOTTIME_ALARM: ::std::os::raw::c_uint = 9;
pub const CLOCK_TAI: ::std::os::raw::c_uint = 11;
pub const TIMER_ABSTIME: ::std::os::raw::c_uint = 1;
pub const TIME_UTC: ::std::os::raw::c_uint = 1;
pub const dWORLDSTEP_THREADCOUNT_UNLIMITED: ::std::os::raw::c_uint = 0;
pub const dWORLDSTEP_RESERVEFACTOR_DEFAULT: f32 = 1.2;
pub const dWORLDSTEP_RESERVESIZE_DEFAULT: ::std::os::raw::c_uint = 65536;
pub const dSAP_AXES_XYZ: ::std::os::raw::c_uint = 36;
pub const dSAP_AXES_XZY: ::std::os::raw::c_uint = 24;
pub const dSAP_AXES_YXZ: ::std::os::raw::c_uint = 33;
pub const dSAP_AXES_YZX: ::std::os::raw::c_uint = 9;
pub const dSAP_AXES_ZXY: ::std::os::raw::c_uint = 18;
pub const CONTACTS_UNIMPORTANT: ::std::os::raw::c_uint = 2147483648;
pub const dODE_VERSION: &'static [u8; 5usize] = b"0.14\x00";
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_1 {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
impl Clone for _bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
pub type max_align_t = _bindgen_ty_1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_2 {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_2>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_2>() , 4usize);
}
impl Clone for _bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
pub type __fsid_t = _bindgen_ty_2;
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(::std::mem::size_of::<_IO_FILE>() , 216usize);
    assert_eq!(::std::mem::align_of::<_IO_FILE>() , 8usize);
}
impl Clone for _IO_FILE {
    fn clone(&self) -> Self { *self }
}
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_3 {
    pub __count: ::std::os::raw::c_int,
    pub __value: _bindgen_ty_3__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_3__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_3__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_3__bindgen_ty_1>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_3__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_3__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_3>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_3>() , 4usize);
}
impl Clone for _bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
pub type __mbstate_t = _bindgen_ty_3;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_4 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_4() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_4>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_4>() , 8usize);
}
impl Clone for _bindgen_ty_4 {
    fn clone(&self) -> Self { *self }
}
pub type _G_fpos_t = _bindgen_ty_4;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_5 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_5() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_5>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_5>() , 8usize);
}
impl Clone for _bindgen_ty_5 {
    fn clone(&self) -> Self { *self }
}
pub type _G_fpos64_t = _bindgen_ty_5;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_jump_t {
    pub _address: u8,
}
impl Clone for _IO_jump_t {
    fn clone(&self) -> Self { *self }
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(::std::mem::size_of::<_IO_marker>() , 24usize);
    assert_eq!(::std::mem::align_of::<_IO_marker>() , 8usize);
}
impl Clone for _IO_marker {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _IO_FILE_plus {
    pub _address: u8,
}
impl Clone for _IO_FILE_plus {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *mut ::std::os::raw::c_char,
                                               __nbytes: usize) -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *const ::std::os::raw::c_char,
                                               __n: usize) -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __pos: *mut __off64_t,
                                               __w: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: *mut __va_list_tag,
                       arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type off_t = __off_t;
pub type fpos_t = _G_fpos_t;
extern "C" {
    #[link_name = "stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: usize,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                     __format: *const ::std::os::raw::c_char,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_fscanf"]
    pub fn fscanf1(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_sscanf"]
    pub fn sscanf1(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vfscanf"]
    pub fn vfscanf1(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vscanf"]
    pub fn vscanf1(__format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vsscanf"]
    pub fn vsscanf1(__s: *const ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut usize, __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                 __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: usize,
                  __n: usize, __s: *mut FILE) -> usize;
}
extern "C" {
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                          __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: usize, __n: usize, __stream: *mut FILE)
     -> usize;
}
extern "C" {
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sys_errlist"]
    pub static mut sys_errlist: *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_6 {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_6() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_6>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_6>() , 4usize);
}
impl Clone for _bindgen_ty_6 {
    fn clone(&self) -> Self { *self }
}
pub type div_t = _bindgen_ty_6;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_7 {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_7() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_7>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_7>() , 8usize);
}
impl Clone for _bindgen_ty_7 {
    fn clone(&self) -> Self { *self }
}
pub type ldiv_t = _bindgen_ty_7;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_8 {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__bindgen_ty_8() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_8>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_8>() , 8usize);
}
impl Clone for _bindgen_ty_8 {
    fn clone(&self) -> Self { *self }
}
pub type lldiv_t = _bindgen_ty_8;
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_9 {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_9() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_9>() , 128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_9>() , 8usize);
}
impl Clone for _bindgen_ty_9 {
    fn clone(&self) -> Self { *self }
}
pub type __sigset_t = _bindgen_ty_9;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(::std::mem::size_of::<timespec>() , 16usize);
    assert_eq!(::std::mem::align_of::<timespec>() , 8usize);
}
impl Clone for timespec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(::std::mem::size_of::<timeval>() , 16usize);
    assert_eq!(::std::mem::align_of::<timeval>() , 8usize);
}
impl Clone for timeval {
    fn clone(&self) -> Self { *self }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_10 {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_10() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_10>() , 128usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_10>() , 8usize);
}
impl Clone for _bindgen_ty_10 {
    fn clone(&self) -> Self { *self }
}
pub type fd_set = _bindgen_ty_10;
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
pub struct pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(::std::mem::size_of::<pthread_attr_t>() , 56usize);
    assert_eq!(::std::mem::align_of::<pthread_attr_t>() , 8usize);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(::std::mem::size_of::<__pthread_internal_list>() , 16usize);
    assert_eq!(::std::mem::align_of::<__pthread_internal_list>() , 8usize);
}
impl Clone for __pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
pub struct _bindgen_ty_11 {
    pub __data: _bindgen_ty_11___pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_11___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_11___pthread_mutex_s() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_11___pthread_mutex_s>() ,
               40usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_11___pthread_mutex_s>() ,
               8usize);
}
impl Clone for _bindgen_ty_11___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_11() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_11>() , 40usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_11>() , 8usize);
}
pub type pthread_mutex_t = _bindgen_ty_11;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_12 {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_12() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_12>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_12>() , 4usize);
}
impl Clone for _bindgen_ty_12 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_mutexattr_t = _bindgen_ty_12;
#[repr(C)]
pub struct _bindgen_ty_13 {
    pub __data: _bindgen_ty_13__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_13__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_13__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_13__bindgen_ty_1>() ,
               48usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_13__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_13__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_13() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_13>() , 48usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_13>() , 8usize);
}
pub type pthread_cond_t = _bindgen_ty_13;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_14 {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_14() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_14>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_14>() , 4usize);
}
impl Clone for _bindgen_ty_14 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_condattr_t = _bindgen_ty_14;
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
pub struct _bindgen_ty_15 {
    pub __data: _bindgen_ty_15__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_15__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_char,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_15__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_15__bindgen_ty_1>() ,
               56usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_15__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _bindgen_ty_15__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_15() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_15>() , 56usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_15>() , 8usize);
}
pub type pthread_rwlock_t = _bindgen_ty_15;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_16 {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_16() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_16>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_16>() , 8usize);
}
impl Clone for _bindgen_ty_16 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_rwlockattr_t = _bindgen_ty_16;
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_17 {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_17() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_17>() , 32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_17>() , 8usize);
}
impl Clone for _bindgen_ty_17 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_barrier_t = _bindgen_ty_17;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_18 {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_18() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_18>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_18>() , 4usize);
}
impl Clone for _bindgen_ty_18 {
    fn clone(&self) -> Self { *self }
}
pub type pthread_barrierattr_t = _bindgen_ty_18;
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(::std::mem::size_of::<random_data>() , 48usize);
    assert_eq!(::std::mem::align_of::<random_data>() , 8usize);
}
impl Clone for random_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: usize, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut random_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(::std::mem::size_of::<drand48_data>() , 24usize);
    assert_eq!(::std::mem::align_of::<drand48_data>() , 8usize);
}
impl Clone for drand48_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: usize, __size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(__func:
                             ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: usize,
                   __size: usize, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: usize,
                 __size: usize, __compar: __compar_fn_t);
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *const ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: f64) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: f64) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn acosl(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosl(__x: f64) -> f64;
}
extern "C" {
    pub fn asinl(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinl(__x: f64) -> f64;
}
extern "C" {
    pub fn atanl(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanl(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2l(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2l(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cosl(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosl(__x: f64) -> f64;
}
extern "C" {
    pub fn sinl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinl(__x: f64) -> f64;
}
extern "C" {
    pub fn tanl(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanl(__x: f64) -> f64;
}
extern "C" {
    pub fn coshl(__x: f64) -> f64;
}
extern "C" {
    pub fn __coshl(__x: f64) -> f64;
}
extern "C" {
    pub fn sinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn tanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn acoshl(__x: f64) -> f64;
}
extern "C" {
    pub fn __acoshl(__x: f64) -> f64;
}
extern "C" {
    pub fn asinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn atanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn expl(__x: f64) -> f64;
}
extern "C" {
    pub fn __expl(__x: f64) -> f64;
}
extern "C" {
    pub fn frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn logl(__x: f64) -> f64;
}
extern "C" {
    pub fn __logl(__x: f64) -> f64;
}
extern "C" {
    pub fn log10l(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10l(__x: f64) -> f64;
}
extern "C" {
    pub fn modfl(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modfl(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1l(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1l(__x: f64) -> f64;
}
extern "C" {
    pub fn log1pl(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1pl(__x: f64) -> f64;
}
extern "C" {
    pub fn logbl(__x: f64) -> f64;
}
extern "C" {
    pub fn __logbl(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2l(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2l(__x: f64) -> f64;
}
extern "C" {
    pub fn log2l(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2l(__x: f64) -> f64;
}
extern "C" {
    pub fn powl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __powl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn hypotl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypotl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn ceill(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceill(__x: f64) -> f64;
}
extern "C" {
    pub fn fabsl(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabsl(__x: f64) -> f64;
}
extern "C" {
    pub fn floorl(__x: f64) -> f64;
}
extern "C" {
    pub fn __floorl(__x: f64) -> f64;
}
extern "C" {
    pub fn fmodl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmodl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __isinfl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinfl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __dreml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significandl(__x: f64) -> f64;
}
extern "C" {
    pub fn __significandl(__x: f64) -> f64;
}
extern "C" {
    pub fn copysignl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysignl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __isnanl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnanl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn gammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn __lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn rintl(__x: f64) -> f64;
}
extern "C" {
    pub fn __rintl(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafterl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttowardl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nexttowardl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn remainderl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainderl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogbl(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyintl(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyintl(__x: f64) -> f64;
}
extern "C" {
    pub fn roundl(__x: f64) -> f64;
}
extern "C" {
    pub fn __roundl(__x: f64) -> f64;
}
extern "C" {
    pub fn truncl(__x: f64) -> f64;
}
extern "C" {
    pub fn __truncl(__x: f64) -> f64;
}
extern "C" {
    pub fn remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn __remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn lrintl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdiml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmaxl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fminl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fminl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmal(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fmal(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalbl(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalbl(__x: f64, __n: f64) -> f64;
}
extern "C" {
    #[link_name = "signgam"]
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: _bindgen_ty_19 = _bindgen_ty_19::FP_NAN;
pub const FP_INFINITE: _bindgen_ty_19 = _bindgen_ty_19::FP_INFINITE;
pub const FP_ZERO: _bindgen_ty_19 = _bindgen_ty_19::FP_ZERO;
pub const FP_SUBNORMAL: _bindgen_ty_19 = _bindgen_ty_19::FP_SUBNORMAL;
pub const FP_NORMAL: _bindgen_ty_19 = _bindgen_ty_19::FP_NORMAL;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_19 {
    FP_NAN = 0,
    FP_INFINITE = 1,
    FP_ZERO = 2,
    FP_SUBNORMAL = 3,
    FP_NORMAL = 4,
}
pub const _IEEE_: _bindgen_ty_20 = _bindgen_ty_20::_IEEE_;
pub const _SVID_: _bindgen_ty_20 = _bindgen_ty_20::_SVID_;
pub const _XOPEN_: _bindgen_ty_20 = _bindgen_ty_20::_XOPEN_;
pub const _POSIX_: _bindgen_ty_20 = _bindgen_ty_20::_POSIX_;
pub const _ISOC_: _bindgen_ty_20 = _bindgen_ty_20::_ISOC_;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_20 {
    _IEEE_ = -1,
    _SVID_ = 0,
    _XOPEN_ = 1,
    _POSIX_ = 2,
    _ISOC_ = 3,
}
pub type _LIB_VERSION_TYPE = _bindgen_ty_20;
extern "C" {
    #[link_name = "_LIB_VERSION"]
    pub static mut _LIB_VERSION: _LIB_VERSION_TYPE;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout_exception() {
    assert_eq!(::std::mem::size_of::<exception>() , 40usize);
    assert_eq!(::std::mem::align_of::<exception>() , 8usize);
}
impl Clone for exception {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn matherr(__exc: *mut exception) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(__dest: *mut ::std::os::raw::c_void,
                  __src: *const ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(__s: *mut ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(__s1: *const ::std::os::raw::c_void,
                  __s2: *const ::std::os::raw::c_void, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(__s: *const ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(__s1: *const ::std::os::raw::c_char,
                  __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_struct___locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __locale_struct___locale_data {
    pub _address: u8,
}
impl Clone for __locale_struct___locale_data {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(::std::mem::size_of::<__locale_struct>() , 232usize);
    assert_eq!(::std::mem::align_of::<__locale_struct>() , 8usize);
}
impl Clone for __locale_struct {
    fn clone(&self) -> Self { *self }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(__s1: *const ::std::os::raw::c_char,
                     __s2: *const ::std::os::raw::c_char, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: usize,
                     __l: __locale_t) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(__string: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(__s: *const ::std::os::raw::c_char,
                   __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(__s: *const ::std::os::raw::c_char,
                   __reject: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(__s: *const ::std::os::raw::c_char,
                  __accept: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(__s: *const ::std::os::raw::c_char,
                   __accept: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(__haystack: *const ::std::os::raw::c_char,
                  __needle: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(__s: *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(__s: *mut ::std::os::raw::c_char,
                      __delim: *const ::std::os::raw::c_char,
                      __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(__s: *mut ::std::os::raw::c_char,
                    __delim: *const ::std::os::raw::c_char,
                    __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize)
     -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "__xpg_strerror_r"]
    pub fn strerror_r(__errnum: ::std::os::raw::c_int,
                      __buf: *mut ::std::os::raw::c_char, __buflen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: __locale_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcopy(__src: *const ::std::os::raw::c_void,
                 __dest: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcmp(__s1: *const ::std::os::raw::c_void,
                __s2: *const ::std::os::raw::c_void, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn index(__s: *const ::std::os::raw::c_char,
                 __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(__s1: *const ::std::os::raw::c_char,
                       __s2: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char,
                    __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
pub type dint64 = ::std::os::raw::c_longlong;
pub type duint64 = ::std::os::raw::c_ulonglong;
pub type dint32 = ::std::os::raw::c_int;
pub type duint32 = ::std::os::raw::c_uint;
pub type dint16 = ::std::os::raw::c_short;
pub type duint16 = ::std::os::raw::c_ushort;
pub type dint8 = ::std::os::raw::c_char;
pub type duint8 = ::std::os::raw::c_uchar;
pub type dMessageFunction =
    ::std::option::Option<unsafe extern "C" fn(errnum: ::std::os::raw::c_int,
                                               msg:
                                                   *const ::std::os::raw::c_char,
                                               ap: *mut __va_list_tag)>;
extern "C" {
    pub fn dSetErrorHandler(fn_: dMessageFunction);
}
extern "C" {
    pub fn dSetDebugHandler(fn_: dMessageFunction);
}
extern "C" {
    pub fn dSetMessageHandler(fn_: dMessageFunction);
}
extern "C" {
    pub fn dGetErrorHandler() -> dMessageFunction;
}
extern "C" {
    pub fn dGetDebugHandler() -> dMessageFunction;
}
extern "C" {
    pub fn dGetMessageHandler() -> dMessageFunction;
}
extern "C" {
    pub fn dError(num: ::std::os::raw::c_int,
                  msg: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn dDebug(num: ::std::os::raw::c_int,
                  msg: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn dMessage(num: ::std::os::raw::c_int,
                    msg: *const ::std::os::raw::c_char, ...);
}
pub type dReal = f64;
pub type dTriIndex = duint32;
pub type dVector3 = [dReal; 4usize];
pub type dVector4 = [dReal; 4usize];
pub type dMatrix3 = [dReal; 12usize];
pub type dMatrix4 = [dReal; 16usize];
pub type dMatrix6 = [dReal; 48usize];
pub type dQuaternion = [dReal; 4usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dxWorld {
    pub _address: u8,
}
impl Clone for dxWorld {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dxSpace {
    pub _address: u8,
}
impl Clone for dxSpace {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dxBody {
    pub _address: u8,
}
impl Clone for dxBody {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dxGeom {
    pub _address: u8,
}
impl Clone for dxGeom {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dxJoint {
    pub _address: u8,
}
impl Clone for dxJoint {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dxJointNode {
    pub _address: u8,
}
impl Clone for dxJointNode {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dxJointGroup {
    pub _address: u8,
}
impl Clone for dxJointGroup {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dxWorldProcessThreadingManager {
    pub _address: u8,
}
impl Clone for dxWorldProcessThreadingManager {
    fn clone(&self) -> Self { *self }
}
pub type dWorldID = *mut dxWorld;
pub type dSpaceID = *mut dxSpace;
pub type dBodyID = *mut dxBody;
pub type dGeomID = *mut dxGeom;
pub type dJointID = *mut dxJoint;
pub type dJointGroupID = *mut dxJointGroup;
pub type dWorldStepThreadingManagerID = *mut dxWorldProcessThreadingManager;
pub const d_ERR_UNKNOWN: _bindgen_ty_21 = _bindgen_ty_21::d_ERR_UNKNOWN;
pub const d_ERR_IASSERT: _bindgen_ty_21 = _bindgen_ty_21::d_ERR_IASSERT;
pub const d_ERR_UASSERT: _bindgen_ty_21 = _bindgen_ty_21::d_ERR_UASSERT;
pub const d_ERR_LCP: _bindgen_ty_21 = _bindgen_ty_21::d_ERR_LCP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_21 {
    d_ERR_UNKNOWN = 0,
    d_ERR_IASSERT = 1,
    d_ERR_UASSERT = 2,
    d_ERR_LCP = 3,
}
pub const dJointTypeNone: _bindgen_ty_22 = _bindgen_ty_22::dJointTypeNone;
pub const dJointTypeBall: _bindgen_ty_22 = _bindgen_ty_22::dJointTypeBall;
pub const dJointTypeHinge: _bindgen_ty_22 = _bindgen_ty_22::dJointTypeHinge;
pub const dJointTypeSlider: _bindgen_ty_22 = _bindgen_ty_22::dJointTypeSlider;
pub const dJointTypeContact: _bindgen_ty_22 =
    _bindgen_ty_22::dJointTypeContact;
pub const dJointTypeUniversal: _bindgen_ty_22 =
    _bindgen_ty_22::dJointTypeUniversal;
pub const dJointTypeHinge2: _bindgen_ty_22 = _bindgen_ty_22::dJointTypeHinge2;
pub const dJointTypeFixed: _bindgen_ty_22 = _bindgen_ty_22::dJointTypeFixed;
pub const dJointTypeNull: _bindgen_ty_22 = _bindgen_ty_22::dJointTypeNull;
pub const dJointTypeAMotor: _bindgen_ty_22 = _bindgen_ty_22::dJointTypeAMotor;
pub const dJointTypeLMotor: _bindgen_ty_22 = _bindgen_ty_22::dJointTypeLMotor;
pub const dJointTypePlane2D: _bindgen_ty_22 =
    _bindgen_ty_22::dJointTypePlane2D;
pub const dJointTypePR: _bindgen_ty_22 = _bindgen_ty_22::dJointTypePR;
pub const dJointTypePU: _bindgen_ty_22 = _bindgen_ty_22::dJointTypePU;
pub const dJointTypePiston: _bindgen_ty_22 = _bindgen_ty_22::dJointTypePiston;
pub const dJointTypeDBall: _bindgen_ty_22 = _bindgen_ty_22::dJointTypeDBall;
pub const dJointTypeDHinge: _bindgen_ty_22 = _bindgen_ty_22::dJointTypeDHinge;
pub const dJointTypeTransmission: _bindgen_ty_22 =
    _bindgen_ty_22::dJointTypeTransmission;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_22 {
    dJointTypeNone = 0,
    dJointTypeBall = 1,
    dJointTypeHinge = 2,
    dJointTypeSlider = 3,
    dJointTypeContact = 4,
    dJointTypeUniversal = 5,
    dJointTypeHinge2 = 6,
    dJointTypeFixed = 7,
    dJointTypeNull = 8,
    dJointTypeAMotor = 9,
    dJointTypeLMotor = 10,
    dJointTypePlane2D = 11,
    dJointTypePR = 12,
    dJointTypePU = 13,
    dJointTypePiston = 14,
    dJointTypeDBall = 15,
    dJointTypeDHinge = 16,
    dJointTypeTransmission = 17,
}
pub type dJointType = _bindgen_ty_22;
pub const dParamLoStop: _bindgen_ty_23 = _bindgen_ty_23::dParamLoStop;
pub const dParamHiStop: _bindgen_ty_23 = _bindgen_ty_23::dParamHiStop;
pub const dParamVel: _bindgen_ty_23 = _bindgen_ty_23::dParamVel;
pub const dParamLoVel: _bindgen_ty_23 = _bindgen_ty_23::dParamLoVel;
pub const dParamHiVel: _bindgen_ty_23 = _bindgen_ty_23::dParamHiVel;
pub const dParamFMax: _bindgen_ty_23 = _bindgen_ty_23::dParamFMax;
pub const dParamFudgeFactor: _bindgen_ty_23 =
    _bindgen_ty_23::dParamFudgeFactor;
pub const dParamBounce: _bindgen_ty_23 = _bindgen_ty_23::dParamBounce;
pub const dParamCFM: _bindgen_ty_23 = _bindgen_ty_23::dParamCFM;
pub const dParamStopERP: _bindgen_ty_23 = _bindgen_ty_23::dParamStopERP;
pub const dParamStopCFM: _bindgen_ty_23 = _bindgen_ty_23::dParamStopCFM;
pub const dParamSuspensionERP: _bindgen_ty_23 =
    _bindgen_ty_23::dParamSuspensionERP;
pub const dParamSuspensionCFM: _bindgen_ty_23 =
    _bindgen_ty_23::dParamSuspensionCFM;
pub const dParamERP: _bindgen_ty_23 = _bindgen_ty_23::dParamERP;
pub const dParamsInGroup: _bindgen_ty_23 = _bindgen_ty_23::dParamsInGroup;
pub const dParamGroup1: _bindgen_ty_23 = _bindgen_ty_23::dParamLoStop;
pub const dParamLoStop1: _bindgen_ty_23 = _bindgen_ty_23::dParamLoStop;
pub const dParamHiStop1: _bindgen_ty_23 = _bindgen_ty_23::dParamHiStop;
pub const dParamVel1: _bindgen_ty_23 = _bindgen_ty_23::dParamVel;
pub const dParamLoVel1: _bindgen_ty_23 = _bindgen_ty_23::dParamLoVel;
pub const dParamHiVel1: _bindgen_ty_23 = _bindgen_ty_23::dParamHiVel;
pub const dParamFMax1: _bindgen_ty_23 = _bindgen_ty_23::dParamFMax;
pub const dParamFudgeFactor1: _bindgen_ty_23 =
    _bindgen_ty_23::dParamFudgeFactor;
pub const dParamBounce1: _bindgen_ty_23 = _bindgen_ty_23::dParamBounce;
pub const dParamCFM1: _bindgen_ty_23 = _bindgen_ty_23::dParamCFM;
pub const dParamStopERP1: _bindgen_ty_23 = _bindgen_ty_23::dParamStopERP;
pub const dParamStopCFM1: _bindgen_ty_23 = _bindgen_ty_23::dParamStopCFM;
pub const dParamSuspensionERP1: _bindgen_ty_23 =
    _bindgen_ty_23::dParamSuspensionERP;
pub const dParamSuspensionCFM1: _bindgen_ty_23 =
    _bindgen_ty_23::dParamSuspensionCFM;
pub const dParamERP1: _bindgen_ty_23 = _bindgen_ty_23::dParamERP;
pub const dParamGroup2: _bindgen_ty_23 = _bindgen_ty_23::dParamGroup2;
pub const dParamLoStop2: _bindgen_ty_23 = _bindgen_ty_23::dParamGroup2;
pub const dParamHiStop2: _bindgen_ty_23 = _bindgen_ty_23::dParamHiStop2;
pub const dParamVel2: _bindgen_ty_23 = _bindgen_ty_23::dParamVel2;
pub const dParamLoVel2: _bindgen_ty_23 = _bindgen_ty_23::dParamLoVel2;
pub const dParamHiVel2: _bindgen_ty_23 = _bindgen_ty_23::dParamHiVel2;
pub const dParamFMax2: _bindgen_ty_23 = _bindgen_ty_23::dParamFMax2;
pub const dParamFudgeFactor2: _bindgen_ty_23 =
    _bindgen_ty_23::dParamFudgeFactor2;
pub const dParamBounce2: _bindgen_ty_23 = _bindgen_ty_23::dParamBounce2;
pub const dParamCFM2: _bindgen_ty_23 = _bindgen_ty_23::dParamCFM2;
pub const dParamStopERP2: _bindgen_ty_23 = _bindgen_ty_23::dParamStopERP2;
pub const dParamStopCFM2: _bindgen_ty_23 = _bindgen_ty_23::dParamStopCFM2;
pub const dParamSuspensionERP2: _bindgen_ty_23 =
    _bindgen_ty_23::dParamSuspensionERP2;
pub const dParamSuspensionCFM2: _bindgen_ty_23 =
    _bindgen_ty_23::dParamSuspensionCFM2;
pub const dParamERP2: _bindgen_ty_23 = _bindgen_ty_23::dParamERP2;
pub const dParamGroup3: _bindgen_ty_23 = _bindgen_ty_23::dParamGroup3;
pub const dParamLoStop3: _bindgen_ty_23 = _bindgen_ty_23::dParamGroup3;
pub const dParamHiStop3: _bindgen_ty_23 = _bindgen_ty_23::dParamHiStop3;
pub const dParamVel3: _bindgen_ty_23 = _bindgen_ty_23::dParamVel3;
pub const dParamLoVel3: _bindgen_ty_23 = _bindgen_ty_23::dParamLoVel3;
pub const dParamHiVel3: _bindgen_ty_23 = _bindgen_ty_23::dParamHiVel3;
pub const dParamFMax3: _bindgen_ty_23 = _bindgen_ty_23::dParamFMax3;
pub const dParamFudgeFactor3: _bindgen_ty_23 =
    _bindgen_ty_23::dParamFudgeFactor3;
pub const dParamBounce3: _bindgen_ty_23 = _bindgen_ty_23::dParamBounce3;
pub const dParamCFM3: _bindgen_ty_23 = _bindgen_ty_23::dParamCFM3;
pub const dParamStopERP3: _bindgen_ty_23 = _bindgen_ty_23::dParamStopERP3;
pub const dParamStopCFM3: _bindgen_ty_23 = _bindgen_ty_23::dParamStopCFM3;
pub const dParamSuspensionERP3: _bindgen_ty_23 =
    _bindgen_ty_23::dParamSuspensionERP3;
pub const dParamSuspensionCFM3: _bindgen_ty_23 =
    _bindgen_ty_23::dParamSuspensionCFM3;
pub const dParamERP3: _bindgen_ty_23 = _bindgen_ty_23::dParamERP3;
pub const dParamGroup: _bindgen_ty_23 = _bindgen_ty_23::dParamGroup2;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_23 {
    dParamLoStop = 0,
    dParamHiStop = 1,
    dParamVel = 2,
    dParamLoVel = 3,
    dParamHiVel = 4,
    dParamFMax = 5,
    dParamFudgeFactor = 6,
    dParamBounce = 7,
    dParamCFM = 8,
    dParamStopERP = 9,
    dParamStopCFM = 10,
    dParamSuspensionERP = 11,
    dParamSuspensionCFM = 12,
    dParamERP = 13,
    dParamsInGroup = 14,
    dParamGroup2 = 256,
    dParamHiStop2 = 257,
    dParamVel2 = 258,
    dParamLoVel2 = 259,
    dParamHiVel2 = 260,
    dParamFMax2 = 261,
    dParamFudgeFactor2 = 262,
    dParamBounce2 = 263,
    dParamCFM2 = 264,
    dParamStopERP2 = 265,
    dParamStopCFM2 = 266,
    dParamSuspensionERP2 = 267,
    dParamSuspensionCFM2 = 268,
    dParamERP2 = 269,
    dParamGroup3 = 512,
    dParamHiStop3 = 513,
    dParamVel3 = 514,
    dParamLoVel3 = 515,
    dParamHiVel3 = 516,
    dParamFMax3 = 517,
    dParamFudgeFactor3 = 518,
    dParamBounce3 = 519,
    dParamCFM3 = 520,
    dParamStopERP3 = 521,
    dParamStopCFM3 = 522,
    dParamSuspensionERP3 = 523,
    dParamSuspensionCFM3 = 524,
    dParamERP3 = 525,
}
pub const dAMotorUser: _bindgen_ty_24 = _bindgen_ty_24::dAMotorUser;
pub const dAMotorEuler: _bindgen_ty_24 = _bindgen_ty_24::dAMotorEuler;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_24 { dAMotorUser = 0, dAMotorEuler = 1, }
pub const dTransmissionParallelAxes: _bindgen_ty_25 =
    _bindgen_ty_25::dTransmissionParallelAxes;
pub const dTransmissionIntersectingAxes: _bindgen_ty_25 =
    _bindgen_ty_25::dTransmissionIntersectingAxes;
pub const dTransmissionChainDrive: _bindgen_ty_25 =
    _bindgen_ty_25::dTransmissionChainDrive;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_25 {
    dTransmissionParallelAxes = 0,
    dTransmissionIntersectingAxes = 1,
    dTransmissionChainDrive = 2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dJointFeedback {
    pub f1: dVector3,
    pub t1: dVector3,
    pub f2: dVector3,
    pub t2: dVector3,
}
#[test]
fn bindgen_test_layout_dJointFeedback() {
    assert_eq!(::std::mem::size_of::<dJointFeedback>() , 128usize);
    assert_eq!(::std::mem::align_of::<dJointFeedback>() , 8usize);
}
impl Clone for dJointFeedback {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn dGeomMoved(arg1: dGeomID);
}
extern "C" {
    pub fn dGeomGetBodyNext(arg1: dGeomID) -> dGeomID;
}
extern "C" {
    pub fn dGetConfiguration() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dCheckConfiguration(token: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum dInitODEFlags { dInitFlagManualThreadCleanup = 1, }
extern "C" {
    pub fn dInitODE();
}
extern "C" {
    pub fn dInitODE2(uiInitFlags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum dAllocateODEDataFlags {
    dAllocateFlagBasicData = 0,
    dAllocateFlagCollisionData = 1,
    dAllocateMaskAll = -1,
}
extern "C" {
    pub fn dAllocateODEDataForThread(uiAllocateFlags: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dCleanupODEAllDataForThread();
}
extern "C" {
    pub fn dCloseODE();
}
pub const dContactMu2: _bindgen_ty_26 = _bindgen_ty_26::dContactMu2;
pub const dContactAxisDep: _bindgen_ty_26 = _bindgen_ty_26::dContactMu2;
pub const dContactFDir1: _bindgen_ty_26 = _bindgen_ty_26::dContactFDir1;
pub const dContactBounce: _bindgen_ty_26 = _bindgen_ty_26::dContactBounce;
pub const dContactSoftERP: _bindgen_ty_26 = _bindgen_ty_26::dContactSoftERP;
pub const dContactSoftCFM: _bindgen_ty_26 = _bindgen_ty_26::dContactSoftCFM;
pub const dContactMotion1: _bindgen_ty_26 = _bindgen_ty_26::dContactMotion1;
pub const dContactMotion2: _bindgen_ty_26 = _bindgen_ty_26::dContactMotion2;
pub const dContactMotionN: _bindgen_ty_26 = _bindgen_ty_26::dContactMotionN;
pub const dContactSlip1: _bindgen_ty_26 = _bindgen_ty_26::dContactSlip1;
pub const dContactSlip2: _bindgen_ty_26 = _bindgen_ty_26::dContactSlip2;
pub const dContactRolling: _bindgen_ty_26 = _bindgen_ty_26::dContactRolling;
pub const dContactApprox0: _bindgen_ty_26 = _bindgen_ty_26::dContactApprox0;
pub const dContactApprox1_1: _bindgen_ty_26 =
    _bindgen_ty_26::dContactApprox1_1;
pub const dContactApprox1_2: _bindgen_ty_26 =
    _bindgen_ty_26::dContactApprox1_2;
pub const dContactApprox1_N: _bindgen_ty_26 =
    _bindgen_ty_26::dContactApprox1_N;
pub const dContactApprox1: _bindgen_ty_26 = _bindgen_ty_26::dContactApprox1;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_26 {
    dContactMu2 = 1,
    dContactFDir1 = 2,
    dContactBounce = 4,
    dContactSoftERP = 8,
    dContactSoftCFM = 16,
    dContactMotion1 = 32,
    dContactMotion2 = 64,
    dContactMotionN = 128,
    dContactSlip1 = 256,
    dContactSlip2 = 512,
    dContactRolling = 1024,
    dContactApprox0 = 0,
    dContactApprox1_1 = 4096,
    dContactApprox1_2 = 8192,
    dContactApprox1_N = 16384,
    dContactApprox1 = 28672,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dSurfaceParameters {
    pub mode: ::std::os::raw::c_int,
    pub mu: dReal,
    pub mu2: dReal,
    pub rho: dReal,
    pub rho2: dReal,
    pub rhoN: dReal,
    pub bounce: dReal,
    pub bounce_vel: dReal,
    pub soft_erp: dReal,
    pub soft_cfm: dReal,
    pub motion1: dReal,
    pub motion2: dReal,
    pub motionN: dReal,
    pub slip1: dReal,
    pub slip2: dReal,
}
#[test]
fn bindgen_test_layout_dSurfaceParameters() {
    assert_eq!(::std::mem::size_of::<dSurfaceParameters>() , 120usize);
    assert_eq!(::std::mem::align_of::<dSurfaceParameters>() , 8usize);
}
impl Clone for dSurfaceParameters {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dContactGeom {
    pub pos: dVector3,
    pub normal: dVector3,
    pub depth: dReal,
    pub g1: dGeomID,
    pub g2: dGeomID,
    pub side1: ::std::os::raw::c_int,
    pub side2: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_dContactGeom() {
    assert_eq!(::std::mem::size_of::<dContactGeom>() , 96usize);
    assert_eq!(::std::mem::align_of::<dContactGeom>() , 8usize);
}
impl Clone for dContactGeom {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dContact {
    pub surface: dSurfaceParameters,
    pub geom: dContactGeom,
    pub fdir1: dVector3,
}
#[test]
fn bindgen_test_layout_dContact() {
    assert_eq!(::std::mem::size_of::<dContact>() , 248usize);
    assert_eq!(::std::mem::align_of::<dContact>() , 8usize);
}
impl Clone for dContact {
    fn clone(&self) -> Self { *self }
}
pub type dAllocFunction =
    ::std::option::Option<unsafe extern "C" fn(size: usize)
                              -> *mut ::std::os::raw::c_void>;
pub type dReallocFunction =
    ::std::option::Option<unsafe extern "C" fn(ptr:
                                                   *mut ::std::os::raw::c_void,
                                               oldsize: usize, newsize: usize)
                              -> *mut ::std::os::raw::c_void>;
pub type dFreeFunction =
    ::std::option::Option<unsafe extern "C" fn(ptr:
                                                   *mut ::std::os::raw::c_void,
                                               size: usize)>;
extern "C" {
    pub fn dSetAllocHandler(fn_: dAllocFunction);
}
extern "C" {
    pub fn dSetReallocHandler(fn_: dReallocFunction);
}
extern "C" {
    pub fn dSetFreeHandler(fn_: dFreeFunction);
}
extern "C" {
    pub fn dGetAllocHandler() -> dAllocFunction;
}
extern "C" {
    pub fn dGetReallocHandler() -> dReallocFunction;
}
extern "C" {
    pub fn dGetFreeHandler() -> dFreeFunction;
}
extern "C" {
    pub fn dAlloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dRealloc(ptr: *mut ::std::os::raw::c_void, oldsize: usize,
                    newsize: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dFree(ptr: *mut ::std::os::raw::c_void, size: usize);
}
extern "C" {
    pub fn dAddVectors3(res: *mut dReal, a: *const dReal, b: *const dReal);
}
extern "C" {
    pub fn dSubtractVectors3(res: *mut dReal, a: *const dReal,
                             b: *const dReal);
}
extern "C" {
    pub fn dAddScaledVectors3(res: *mut dReal, a: *const dReal,
                              b: *const dReal, a_scale: dReal,
                              b_scale: dReal);
}
extern "C" {
    pub fn dScaleVector3(res: *mut dReal, nScale: dReal);
}
extern "C" {
    pub fn dNegateVector3(res: *mut dReal);
}
extern "C" {
    pub fn dCopyVector3(res: *mut dReal, a: *const dReal);
}
extern "C" {
    pub fn dCopyScaledVector3(res: *mut dReal, a: *const dReal,
                              nScale: dReal);
}
extern "C" {
    pub fn dCopyNegatedVector3(res: *mut dReal, a: *const dReal);
}
extern "C" {
    pub fn dCopyVector4(res: *mut dReal, a: *const dReal);
}
extern "C" {
    pub fn dCopyMatrix4x4(res: *mut dReal, a: *const dReal);
}
extern "C" {
    pub fn dCopyMatrix4x3(res: *mut dReal, a: *const dReal);
}
extern "C" {
    pub fn dGetMatrixColumn3(res: *mut dReal, a: *const dReal,
                             n: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn dCalcVectorLength3(a: *const dReal) -> dReal;
}
extern "C" {
    pub fn dCalcVectorLengthSquare3(a: *const dReal) -> dReal;
}
extern "C" {
    pub fn dCalcPointDepth3(test_p: *const dReal, plane_p: *const dReal,
                            plane_n: *const dReal) -> dReal;
}
extern "C" {
    pub fn _dCalcVectorDot3(a: *const dReal, b: *const dReal,
                            step_a: ::std::os::raw::c_uint,
                            step_b: ::std::os::raw::c_uint) -> dReal;
}
extern "C" {
    pub fn dCalcVectorDot3(a: *const dReal, b: *const dReal) -> dReal;
}
extern "C" {
    pub fn dCalcVectorDot3_13(a: *const dReal, b: *const dReal) -> dReal;
}
extern "C" {
    pub fn dCalcVectorDot3_31(a: *const dReal, b: *const dReal) -> dReal;
}
extern "C" {
    pub fn dCalcVectorDot3_33(a: *const dReal, b: *const dReal) -> dReal;
}
extern "C" {
    pub fn dCalcVectorDot3_14(a: *const dReal, b: *const dReal) -> dReal;
}
extern "C" {
    pub fn dCalcVectorDot3_41(a: *const dReal, b: *const dReal) -> dReal;
}
extern "C" {
    pub fn dCalcVectorDot3_44(a: *const dReal, b: *const dReal) -> dReal;
}
extern "C" {
    pub fn _dCalcVectorCross3(res: *mut dReal, a: *const dReal,
                              b: *const dReal,
                              step_res: ::std::os::raw::c_uint,
                              step_a: ::std::os::raw::c_uint,
                              step_b: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn dCalcVectorCross3(res: *mut dReal, a: *const dReal,
                             b: *const dReal);
}
extern "C" {
    pub fn dCalcVectorCross3_114(res: *mut dReal, a: *const dReal,
                                 b: *const dReal);
}
extern "C" {
    pub fn dCalcVectorCross3_141(res: *mut dReal, a: *const dReal,
                                 b: *const dReal);
}
extern "C" {
    pub fn dCalcVectorCross3_144(res: *mut dReal, a: *const dReal,
                                 b: *const dReal);
}
extern "C" {
    pub fn dCalcVectorCross3_411(res: *mut dReal, a: *const dReal,
                                 b: *const dReal);
}
extern "C" {
    pub fn dCalcVectorCross3_414(res: *mut dReal, a: *const dReal,
                                 b: *const dReal);
}
extern "C" {
    pub fn dCalcVectorCross3_441(res: *mut dReal, a: *const dReal,
                                 b: *const dReal);
}
extern "C" {
    pub fn dCalcVectorCross3_444(res: *mut dReal, a: *const dReal,
                                 b: *const dReal);
}
extern "C" {
    pub fn dAddVectorCross3(res: *mut dReal, a: *const dReal,
                            b: *const dReal);
}
extern "C" {
    pub fn dSubtractVectorCross3(res: *mut dReal, a: *const dReal,
                                 b: *const dReal);
}
extern "C" {
    pub fn dSetCrossMatrixPlus(res: *mut dReal, a: *const dReal,
                               skip: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn dSetCrossMatrixMinus(res: *mut dReal, a: *const dReal,
                                skip: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn dCalcPointsDistance3(a: *const dReal, b: *const dReal) -> dReal;
}
extern "C" {
    pub fn dMultiplyHelper0_331(res: *mut dReal, a: *const dReal,
                                b: *const dReal);
}
extern "C" {
    pub fn dMultiplyHelper1_331(res: *mut dReal, a: *const dReal,
                                b: *const dReal);
}
extern "C" {
    pub fn dMultiplyHelper0_133(res: *mut dReal, a: *const dReal,
                                b: *const dReal);
}
extern "C" {
    pub fn dMultiplyHelper1_133(res: *mut dReal, a: *const dReal,
                                b: *const dReal);
}
extern "C" {
    pub fn dMultiply0_331(res: *mut dReal, a: *const dReal, b: *const dReal);
}
extern "C" {
    pub fn dMultiply1_331(res: *mut dReal, a: *const dReal, b: *const dReal);
}
extern "C" {
    pub fn dMultiply0_133(res: *mut dReal, a: *const dReal, b: *const dReal);
}
extern "C" {
    pub fn dMultiply0_333(res: *mut dReal, a: *const dReal, b: *const dReal);
}
extern "C" {
    pub fn dMultiply1_333(res: *mut dReal, a: *const dReal, b: *const dReal);
}
extern "C" {
    pub fn dMultiply2_333(res: *mut dReal, a: *const dReal, b: *const dReal);
}
extern "C" {
    pub fn dMultiplyAdd0_331(res: *mut dReal, a: *const dReal,
                             b: *const dReal);
}
extern "C" {
    pub fn dMultiplyAdd1_331(res: *mut dReal, a: *const dReal,
                             b: *const dReal);
}
extern "C" {
    pub fn dMultiplyAdd0_133(res: *mut dReal, a: *const dReal,
                             b: *const dReal);
}
extern "C" {
    pub fn dMultiplyAdd0_333(res: *mut dReal, a: *const dReal,
                             b: *const dReal);
}
extern "C" {
    pub fn dMultiplyAdd1_333(res: *mut dReal, a: *const dReal,
                             b: *const dReal);
}
extern "C" {
    pub fn dMultiplyAdd2_333(res: *mut dReal, a: *const dReal,
                             b: *const dReal);
}
extern "C" {
    pub fn dCalcMatrix3Det(mat: *const dReal) -> dReal;
}
extern "C" {
    pub fn dInvertMatrix3(dst: *mut dReal, ma: *const dReal) -> dReal;
}
extern "C" {
    pub fn dSafeNormalize3(a: *mut dReal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dSafeNormalize4(a: *mut dReal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dNormalize3(a: *mut dReal);
}
extern "C" {
    pub fn dNormalize4(a: *mut dReal);
}
extern "C" {
    pub fn dPlaneSpace(n: *const dReal, p: *mut dReal, q: *mut dReal);
}
extern "C" {
    pub fn dOrthogonalizeR(m: *mut dReal);
}
extern "C" {
    pub fn dSetZero(a: *mut dReal, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dSetValue(a: *mut dReal, n: ::std::os::raw::c_int, value: dReal);
}
extern "C" {
    pub fn dDot(a: *const dReal, b: *const dReal, n: ::std::os::raw::c_int)
     -> dReal;
}
extern "C" {
    pub fn dMultiply0(A: *mut dReal, B: *const dReal, C: *const dReal,
                      p: ::std::os::raw::c_int, q: ::std::os::raw::c_int,
                      r: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dMultiply1(A: *mut dReal, B: *const dReal, C: *const dReal,
                      p: ::std::os::raw::c_int, q: ::std::os::raw::c_int,
                      r: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dMultiply2(A: *mut dReal, B: *const dReal, C: *const dReal,
                      p: ::std::os::raw::c_int, q: ::std::os::raw::c_int,
                      r: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dFactorCholesky(A: *mut dReal, n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dSolveCholesky(L: *const dReal, b: *mut dReal,
                          n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dInvertPDMatrix(A: *const dReal, Ainv: *mut dReal,
                           n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dIsPositiveDefinite(A: *const dReal, n: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dFactorLDLT(A: *mut dReal, d: *mut dReal, n: ::std::os::raw::c_int,
                       nskip: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dSolveL1(L: *const dReal, b: *mut dReal, n: ::std::os::raw::c_int,
                    nskip: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dSolveL1T(L: *const dReal, b: *mut dReal, n: ::std::os::raw::c_int,
                     nskip: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dVectorScale(a: *mut dReal, d: *const dReal,
                        n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dSolveLDLT(L: *const dReal, d: *const dReal, b: *mut dReal,
                      n: ::std::os::raw::c_int, nskip: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dLDLTAddTL(L: *mut dReal, d: *mut dReal, a: *const dReal,
                      n: ::std::os::raw::c_int, nskip: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dLDLTRemove(A: *mut *mut dReal, p: *const ::std::os::raw::c_int,
                       L: *mut dReal, d: *mut dReal,
                       n1: ::std::os::raw::c_int, n2: ::std::os::raw::c_int,
                       r: ::std::os::raw::c_int,
                       nskip: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dRemoveRowCol(A: *mut dReal, n: ::std::os::raw::c_int,
                         nskip: ::std::os::raw::c_int,
                         r: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dStopwatch {
    pub time: f64,
    pub cc: [::std::os::raw::c_ulong; 2usize],
}
#[test]
fn bindgen_test_layout_dStopwatch() {
    assert_eq!(::std::mem::size_of::<dStopwatch>() , 24usize);
    assert_eq!(::std::mem::align_of::<dStopwatch>() , 8usize);
}
impl Clone for dStopwatch {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn dStopwatchReset(arg1: *mut dStopwatch);
}
extern "C" {
    pub fn dStopwatchStart(arg1: *mut dStopwatch);
}
extern "C" {
    pub fn dStopwatchStop(arg1: *mut dStopwatch);
}
extern "C" {
    pub fn dStopwatchTime(arg1: *mut dStopwatch) -> f64;
}
extern "C" {
    pub fn dTimerStart(description: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn dTimerNow(description: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn dTimerEnd();
}
extern "C" {
    pub fn dTimerReport(fout: *mut FILE, average: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dTimerTicksPerSecond() -> f64;
}
extern "C" {
    pub fn dTimerResolution() -> f64;
}
extern "C" {
    pub fn dRSetIdentity(R: *mut dReal);
}
extern "C" {
    pub fn dRFromAxisAndAngle(R: *mut dReal, ax: dReal, ay: dReal, az: dReal,
                              angle: dReal);
}
extern "C" {
    pub fn dRFromEulerAngles(R: *mut dReal, phi: dReal, theta: dReal,
                             psi: dReal);
}
extern "C" {
    pub fn dRFrom2Axes(R: *mut dReal, ax: dReal, ay: dReal, az: dReal,
                       bx: dReal, by: dReal, bz: dReal);
}
extern "C" {
    pub fn dRFromZAxis(R: *mut dReal, ax: dReal, ay: dReal, az: dReal);
}
extern "C" {
    pub fn dQSetIdentity(q: *mut dReal);
}
extern "C" {
    pub fn dQFromAxisAndAngle(q: *mut dReal, ax: dReal, ay: dReal, az: dReal,
                              angle: dReal);
}
extern "C" {
    pub fn dQMultiply0(qa: *mut dReal, qb: *const dReal, qc: *const dReal);
}
extern "C" {
    pub fn dQMultiply1(qa: *mut dReal, qb: *const dReal, qc: *const dReal);
}
extern "C" {
    pub fn dQMultiply2(qa: *mut dReal, qb: *const dReal, qc: *const dReal);
}
extern "C" {
    pub fn dQMultiply3(qa: *mut dReal, qb: *const dReal, qc: *const dReal);
}
extern "C" {
    pub fn dRfromQ(R: *mut dReal, q: *const dReal);
}
extern "C" {
    pub fn dQfromR(q: *mut dReal, R: *const dReal);
}
extern "C" {
    pub fn dDQfromW(dq: *mut dReal, w: *const dReal, q: *const dReal);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dMass {
    pub mass: dReal,
    pub c: dVector3,
    pub I: dMatrix3,
}
#[test]
fn bindgen_test_layout_dMass() {
    assert_eq!(::std::mem::size_of::<dMass>() , 136usize);
    assert_eq!(::std::mem::align_of::<dMass>() , 8usize);
}
impl Clone for dMass {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn dMassCheck(m: *const dMass) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dMassSetZero(arg1: *mut dMass);
}
extern "C" {
    pub fn dMassSetParameters(arg1: *mut dMass, themass: dReal, cgx: dReal,
                              cgy: dReal, cgz: dReal, I11: dReal, I22: dReal,
                              I33: dReal, I12: dReal, I13: dReal, I23: dReal);
}
extern "C" {
    pub fn dMassSetSphere(arg1: *mut dMass, density: dReal, radius: dReal);
}
extern "C" {
    pub fn dMassSetSphereTotal(arg1: *mut dMass, total_mass: dReal,
                               radius: dReal);
}
extern "C" {
    pub fn dMassSetCapsule(arg1: *mut dMass, density: dReal,
                           direction: ::std::os::raw::c_int, radius: dReal,
                           length: dReal);
}
extern "C" {
    pub fn dMassSetCapsuleTotal(arg1: *mut dMass, total_mass: dReal,
                                direction: ::std::os::raw::c_int,
                                radius: dReal, length: dReal);
}
extern "C" {
    pub fn dMassSetCylinder(arg1: *mut dMass, density: dReal,
                            direction: ::std::os::raw::c_int, radius: dReal,
                            length: dReal);
}
extern "C" {
    pub fn dMassSetCylinderTotal(arg1: *mut dMass, total_mass: dReal,
                                 direction: ::std::os::raw::c_int,
                                 radius: dReal, length: dReal);
}
extern "C" {
    pub fn dMassSetBox(arg1: *mut dMass, density: dReal, lx: dReal, ly: dReal,
                       lz: dReal);
}
extern "C" {
    pub fn dMassSetBoxTotal(arg1: *mut dMass, total_mass: dReal, lx: dReal,
                            ly: dReal, lz: dReal);
}
extern "C" {
    pub fn dMassSetTrimesh(arg1: *mut dMass, density: dReal, g: dGeomID);
}
extern "C" {
    pub fn dMassSetTrimeshTotal(m: *mut dMass, total_mass: dReal, g: dGeomID);
}
extern "C" {
    pub fn dMassAdjust(arg1: *mut dMass, newmass: dReal);
}
extern "C" {
    pub fn dMassTranslate(arg1: *mut dMass, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dMassRotate(arg1: *mut dMass, R: *const dReal);
}
extern "C" {
    pub fn dMassAdd(a: *mut dMass, b: *const dMass);
}
extern "C" {
    pub fn dMassSetCappedCylinder(a: *mut dMass, b: dReal,
                                  c: ::std::os::raw::c_int, d: dReal,
                                  e: dReal);
}
extern "C" {
    pub fn dMassSetCappedCylinderTotal(a: *mut dMass, b: dReal,
                                       c: ::std::os::raw::c_int, d: dReal,
                                       e: dReal);
}
extern "C" {
    pub fn dTestRand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dRand() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn dRandGetSeed() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn dRandSetSeed(s: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn dRandInt(n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dRandReal() -> dReal;
}
extern "C" {
    pub fn dPrintMatrix(A: *const dReal, n: ::std::os::raw::c_int,
                        m: ::std::os::raw::c_int,
                        fmt: *const ::std::os::raw::c_char, f: *mut FILE);
}
extern "C" {
    pub fn dMakeRandomVector(A: *mut dReal, n: ::std::os::raw::c_int,
                             range: dReal);
}
extern "C" {
    pub fn dMakeRandomMatrix(A: *mut dReal, n: ::std::os::raw::c_int,
                             m: ::std::os::raw::c_int, range: dReal);
}
extern "C" {
    pub fn dClearUpperTriangle(A: *mut dReal, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dMaxDifference(A: *const dReal, B: *const dReal,
                          n: ::std::os::raw::c_int, m: ::std::os::raw::c_int)
     -> dReal;
}
extern "C" {
    pub fn dMaxDifferenceLowerTriangle(A: *const dReal, B: *const dReal,
                                       n: ::std::os::raw::c_int) -> dReal;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(::std::mem::size_of::<tm>() , 56usize);
    assert_eq!(::std::mem::align_of::<tm>() , 8usize);
}
impl Clone for tm {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(::std::mem::size_of::<itimerspec>() , 32usize);
    assert_eq!(::std::mem::align_of::<itimerspec>() , 8usize);
}
impl Clone for itimerspec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigevent {
    pub _address: u8,
}
impl Clone for sigevent {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(__s: *mut ::std::os::raw::c_char, __maxsize: usize,
                    __format: *const ::std::os::raw::c_char, __tp: *const tm)
     -> usize;
}
extern "C" {
    pub fn strftime_l(__s: *mut ::std::os::raw::c_char, __maxsize: usize,
                      __format: *const ::std::os::raw::c_char,
                      __tp: *const tm, __loc: __locale_t) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(__tp: *const tm, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "__tzname"]
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    #[link_name = "__daylight"]
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__timezone"]
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    #[link_name = "daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(__requested_time: *const timespec,
                     __remaining: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(__clock_id: clockid_t,
                           __flags: ::std::os::raw::c_int,
                           __req: *const timespec, __rem: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut sigevent,
                        __timerid: *mut timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(__timerid: timer_t, __flags: ::std::os::raw::c_int,
                         __value: *const itimerspec,
                         __ovalue: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(__ts: *mut timespec, __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dxThreadingImplementation {
    pub _address: u8,
}
impl Clone for dxThreadingImplementation {
    fn clone(&self) -> Self { *self }
}
pub type dThreadingImplementationID = *mut dxThreadingImplementation;
pub type dmutexindex_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dxMutexGroup {
    pub _address: u8,
}
impl Clone for dxMutexGroup {
    fn clone(&self) -> Self { *self }
}
pub type dMutexGroupID = *mut dxMutexGroup;
pub type dMutexGroupAllocFunction =
    ::std::option::Option<unsafe extern "C" fn(impl_:
                                                   dThreadingImplementationID,
                                               Mutex_count: dmutexindex_t,
                                               Mutex_names_ptr:
                                                   *const *const ::std::os::raw::c_char)
                              -> dMutexGroupID>;
pub type dMutexGroupFreeFunction =
    ::std::option::Option<unsafe extern "C" fn(impl_:
                                                   dThreadingImplementationID,
                                               mutex_group: dMutexGroupID)>;
pub type dMutexGroupMutexLockFunction =
    ::std::option::Option<unsafe extern "C" fn(impl_:
                                                   dThreadingImplementationID,
                                               mutex_group: dMutexGroupID,
                                               mutex_index: dmutexindex_t)>;
pub type dMutexGroupMutexUnlockFunction =
    ::std::option::Option<unsafe extern "C" fn(impl_:
                                                   dThreadingImplementationID,
                                               mutex_group: dMutexGroupID,
                                               mutex_index: dmutexindex_t)>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dxCallReleasee {
    pub _address: u8,
}
impl Clone for dxCallReleasee {
    fn clone(&self) -> Self { *self }
}
pub type dCallReleaseeID = *mut dxCallReleasee;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dxCallWait {
    pub _address: u8,
}
impl Clone for dxCallWait {
    fn clone(&self) -> Self { *self }
}
pub type dCallWaitID = *mut dxCallWait;
pub type ddependencycount_t = usize;
pub type ddependencychange_t = isize;
pub type dcallindex_t = usize;
pub type dThreadedCallFunction =
    ::std::option::Option<unsafe extern "C" fn(call_context:
                                                   *mut ::std::os::raw::c_void,
                                               instance_index: dcallindex_t,
                                               this_releasee: dCallReleaseeID)
                              -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dxThreadedWaitTime {
    pub wait_sec: time_t,
    pub wait_nsec: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_dxThreadedWaitTime() {
    assert_eq!(::std::mem::size_of::<dxThreadedWaitTime>() , 16usize);
    assert_eq!(::std::mem::align_of::<dxThreadedWaitTime>() , 8usize);
}
impl Clone for dxThreadedWaitTime {
    fn clone(&self) -> Self { *self }
}
pub type dThreadedWaitTime = dxThreadedWaitTime;
pub type dThreadedCallWaitAllocFunction =
    ::std::option::Option<unsafe extern "C" fn(impl_:
                                                   dThreadingImplementationID)
                              -> dCallWaitID>;
pub type dThreadedCallWaitResetFunction =
    ::std::option::Option<unsafe extern "C" fn(impl_:
                                                   dThreadingImplementationID,
                                               call_wait: dCallWaitID)>;
pub type dThreadedCallWaitFreeFunction =
    ::std::option::Option<unsafe extern "C" fn(impl_:
                                                   dThreadingImplementationID,
                                               call_wait: dCallWaitID)>;
pub type dThreadedCallPostFunction =
    ::std::option::Option<unsafe extern "C" fn(impl_:
                                                   dThreadingImplementationID,
                                               out_summary_fault:
                                                   *mut ::std::os::raw::c_int,
                                               out_post_releasee:
                                                   *mut dCallReleaseeID,
                                               dependencies_count:
                                                   ddependencycount_t,
                                               dependent_releasee:
                                                   dCallReleaseeID,
                                               call_wait: dCallWaitID,
                                               call_func:
                                                   dThreadedCallFunction,
                                               call_context:
                                                   *mut ::std::os::raw::c_void,
                                               instance_index: dcallindex_t,
                                               call_name:
                                                   *const ::std::os::raw::c_char)>;
pub type dThreadedCallDependenciesCountAlterFunction =
    ::std::option::Option<unsafe extern "C" fn(impl_:
                                                   dThreadingImplementationID,
                                               target_releasee:
                                                   dCallReleaseeID,
                                               dependencies_count_change:
                                                   ddependencychange_t)>;
pub type dThreadedCallWaitFunction =
    ::std::option::Option<unsafe extern "C" fn(impl_:
                                                   dThreadingImplementationID,
                                               out_wait_status:
                                                   *mut ::std::os::raw::c_int,
                                               call_wait: dCallWaitID,
                                               timeout_time_ptr:
                                                   *const dThreadedWaitTime,
                                               wait_name:
                                                   *const ::std::os::raw::c_char)>;
pub type dThreadingImplThreadCountRetrieveFunction =
    ::std::option::Option<unsafe extern "C" fn(impl_:
                                                   dThreadingImplementationID)
                              -> ::std::os::raw::c_uint>;
pub type dThreadingImplResourcesForCallsPreallocateFunction =
    ::std::option::Option<unsafe extern "C" fn(impl_:
                                                   dThreadingImplementationID,
                                               max_simultaneous_calls_estimate:
                                                   ddependencycount_t)
                              -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dxThreadingFunctionsInfo {
    pub struct_size: ::std::os::raw::c_uint,
    pub alloc_mutex_group: dMutexGroupAllocFunction,
    pub free_mutex_group: dMutexGroupFreeFunction,
    pub lock_group_mutex: dMutexGroupMutexLockFunction,
    pub unlock_group_mutex: dMutexGroupMutexUnlockFunction,
    pub alloc_call_wait: dThreadedCallWaitAllocFunction,
    pub reset_call_wait: dThreadedCallWaitResetFunction,
    pub free_call_wait: dThreadedCallWaitFreeFunction,
    pub post_call: dThreadedCallPostFunction,
    pub alter_call_dependencies_count: dThreadedCallDependenciesCountAlterFunction,
    pub wait_call: dThreadedCallWaitFunction,
    pub retrieve_thread_count: dThreadingImplThreadCountRetrieveFunction,
    pub preallocate_resources_for_calls: dThreadingImplResourcesForCallsPreallocateFunction,
}
#[test]
fn bindgen_test_layout_dxThreadingFunctionsInfo() {
    assert_eq!(::std::mem::size_of::<dxThreadingFunctionsInfo>() , 104usize);
    assert_eq!(::std::mem::align_of::<dxThreadingFunctionsInfo>() , 8usize);
}
impl Clone for dxThreadingFunctionsInfo {
    fn clone(&self) -> Self { *self }
}
pub type dThreadingFunctionsInfo = dxThreadingFunctionsInfo;
extern "C" {
    pub fn dWorldCreate() -> dWorldID;
}
extern "C" {
    pub fn dWorldDestroy(world: dWorldID);
}
extern "C" {
    pub fn dWorldSetData(world: dWorldID, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dWorldGetData(world: dWorldID) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dWorldSetGravity(arg1: dWorldID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dWorldGetGravity(arg1: dWorldID, gravity: *mut dReal);
}
extern "C" {
    pub fn dWorldSetERP(arg1: dWorldID, erp: dReal);
}
extern "C" {
    pub fn dWorldGetERP(arg1: dWorldID) -> dReal;
}
extern "C" {
    pub fn dWorldSetCFM(arg1: dWorldID, cfm: dReal);
}
extern "C" {
    pub fn dWorldGetCFM(arg1: dWorldID) -> dReal;
}
extern "C" {
    pub fn dWorldSetStepIslandsProcessingMaxThreadCount(w: dWorldID,
                                                        count:
                                                            ::std::os::raw::c_uint);
}
extern "C" {
    pub fn dWorldGetStepIslandsProcessingMaxThreadCount(w: dWorldID)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn dWorldUseSharedWorkingMemory(w: dWorldID, from_world: dWorldID)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dWorldCleanupWorkingMemory(w: dWorldID);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_27 {
    pub struct_size: ::std::os::raw::c_uint,
    pub reserve_factor: f32,
    pub reserve_minimum: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__bindgen_ty_27() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_27>() , 12usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_27>() , 4usize);
}
impl Clone for _bindgen_ty_27 {
    fn clone(&self) -> Self { *self }
}
pub type dWorldStepReserveInfo = _bindgen_ty_27;
extern "C" {
    pub fn dWorldSetStepMemoryReservationPolicy(w: dWorldID,
                                                policyinfo:
                                                    *const dWorldStepReserveInfo)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_28 {
    pub struct_size: ::std::os::raw::c_uint,
    pub alloc_block: ::std::option::Option<unsafe extern "C" fn(block_size:
                                                                    usize)
                                               ->
                                                   *mut ::std::os::raw::c_void>,
    pub shrink_block: ::std::option::Option<unsafe extern "C" fn(block_pointer:
                                                                     *mut ::std::os::raw::c_void,
                                                                 block_current_size:
                                                                     usize,
                                                                 block_smaller_size:
                                                                     usize)
                                                ->
                                                    *mut ::std::os::raw::c_void>,
    pub free_block: ::std::option::Option<unsafe extern "C" fn(block_pointer:
                                                                   *mut ::std::os::raw::c_void,
                                                               block_current_size:
                                                                   usize)>,
}
#[test]
fn bindgen_test_layout__bindgen_ty_28() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_28>() , 32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_28>() , 8usize);
}
impl Clone for _bindgen_ty_28 {
    fn clone(&self) -> Self { *self }
}
pub type dWorldStepMemoryFunctionsInfo = _bindgen_ty_28;
extern "C" {
    pub fn dWorldSetStepMemoryManager(w: dWorldID,
                                      memfuncs:
                                          *const dWorldStepMemoryFunctionsInfo)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dWorldSetStepThreadingImplementation(w: dWorldID,
                                                functions_info:
                                                    *const dThreadingFunctionsInfo,
                                                threading_impl:
                                                    dThreadingImplementationID);
}
extern "C" {
    pub fn dWorldStep(w: dWorldID, stepsize: dReal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dWorldQuickStep(w: dWorldID, stepsize: dReal)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dWorldImpulseToForce(arg1: dWorldID, stepsize: dReal, ix: dReal,
                                iy: dReal, iz: dReal, force: *mut dReal);
}
extern "C" {
    pub fn dWorldSetQuickStepNumIterations(arg1: dWorldID,
                                           num: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dWorldGetQuickStepNumIterations(arg1: dWorldID)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dWorldSetQuickStepW(arg1: dWorldID, over_relaxation: dReal);
}
extern "C" {
    pub fn dWorldGetQuickStepW(arg1: dWorldID) -> dReal;
}
extern "C" {
    pub fn dWorldSetContactMaxCorrectingVel(arg1: dWorldID, vel: dReal);
}
extern "C" {
    pub fn dWorldGetContactMaxCorrectingVel(arg1: dWorldID) -> dReal;
}
extern "C" {
    pub fn dWorldSetContactSurfaceLayer(arg1: dWorldID, depth: dReal);
}
extern "C" {
    pub fn dWorldGetContactSurfaceLayer(arg1: dWorldID) -> dReal;
}
extern "C" {
    pub fn dWorldGetAutoDisableLinearThreshold(arg1: dWorldID) -> dReal;
}
extern "C" {
    pub fn dWorldSetAutoDisableLinearThreshold(arg1: dWorldID,
                                               linear_average_threshold:
                                                   dReal);
}
extern "C" {
    pub fn dWorldGetAutoDisableAngularThreshold(arg1: dWorldID) -> dReal;
}
extern "C" {
    pub fn dWorldSetAutoDisableAngularThreshold(arg1: dWorldID,
                                                angular_average_threshold:
                                                    dReal);
}
extern "C" {
    pub fn dWorldGetAutoDisableAverageSamplesCount(arg1: dWorldID)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dWorldSetAutoDisableAverageSamplesCount(arg1: dWorldID,
                                                   average_samples_count:
                                                       ::std::os::raw::c_uint);
}
extern "C" {
    pub fn dWorldGetAutoDisableSteps(arg1: dWorldID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dWorldSetAutoDisableSteps(arg1: dWorldID,
                                     steps: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dWorldGetAutoDisableTime(arg1: dWorldID) -> dReal;
}
extern "C" {
    pub fn dWorldSetAutoDisableTime(arg1: dWorldID, time: dReal);
}
extern "C" {
    pub fn dWorldGetAutoDisableFlag(arg1: dWorldID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dWorldSetAutoDisableFlag(arg1: dWorldID,
                                    do_auto_disable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dWorldGetLinearDampingThreshold(w: dWorldID) -> dReal;
}
extern "C" {
    pub fn dWorldSetLinearDampingThreshold(w: dWorldID, threshold: dReal);
}
extern "C" {
    pub fn dWorldGetAngularDampingThreshold(w: dWorldID) -> dReal;
}
extern "C" {
    pub fn dWorldSetAngularDampingThreshold(w: dWorldID, threshold: dReal);
}
extern "C" {
    pub fn dWorldGetLinearDamping(w: dWorldID) -> dReal;
}
extern "C" {
    pub fn dWorldSetLinearDamping(w: dWorldID, scale: dReal);
}
extern "C" {
    pub fn dWorldGetAngularDamping(w: dWorldID) -> dReal;
}
extern "C" {
    pub fn dWorldSetAngularDamping(w: dWorldID, scale: dReal);
}
extern "C" {
    pub fn dWorldSetDamping(w: dWorldID, linear_scale: dReal,
                            angular_scale: dReal);
}
extern "C" {
    pub fn dWorldGetMaxAngularSpeed(w: dWorldID) -> dReal;
}
extern "C" {
    pub fn dWorldSetMaxAngularSpeed(w: dWorldID, max_speed: dReal);
}
extern "C" {
    pub fn dBodyGetAutoDisableLinearThreshold(arg1: dBodyID) -> dReal;
}
extern "C" {
    pub fn dBodySetAutoDisableLinearThreshold(arg1: dBodyID,
                                              linear_average_threshold:
                                                  dReal);
}
extern "C" {
    pub fn dBodyGetAutoDisableAngularThreshold(arg1: dBodyID) -> dReal;
}
extern "C" {
    pub fn dBodySetAutoDisableAngularThreshold(arg1: dBodyID,
                                               angular_average_threshold:
                                                   dReal);
}
extern "C" {
    pub fn dBodyGetAutoDisableAverageSamplesCount(arg1: dBodyID)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dBodySetAutoDisableAverageSamplesCount(arg1: dBodyID,
                                                  average_samples_count:
                                                      ::std::os::raw::c_uint);
}
extern "C" {
    pub fn dBodyGetAutoDisableSteps(arg1: dBodyID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dBodySetAutoDisableSteps(arg1: dBodyID,
                                    steps: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dBodyGetAutoDisableTime(arg1: dBodyID) -> dReal;
}
extern "C" {
    pub fn dBodySetAutoDisableTime(arg1: dBodyID, time: dReal);
}
extern "C" {
    pub fn dBodyGetAutoDisableFlag(arg1: dBodyID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dBodySetAutoDisableFlag(arg1: dBodyID,
                                   do_auto_disable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dBodySetAutoDisableDefaults(arg1: dBodyID);
}
extern "C" {
    pub fn dBodyGetWorld(arg1: dBodyID) -> dWorldID;
}
extern "C" {
    pub fn dBodyCreate(arg1: dWorldID) -> dBodyID;
}
extern "C" {
    pub fn dBodyDestroy(arg1: dBodyID);
}
extern "C" {
    pub fn dBodySetData(arg1: dBodyID, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dBodyGetData(arg1: dBodyID) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dBodySetPosition(arg1: dBodyID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dBodySetRotation(arg1: dBodyID, R: *const dReal);
}
extern "C" {
    pub fn dBodySetQuaternion(arg1: dBodyID, q: *const dReal);
}
extern "C" {
    pub fn dBodySetLinearVel(arg1: dBodyID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dBodySetAngularVel(arg1: dBodyID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dBodyGetPosition(arg1: dBodyID) -> *const dReal;
}
extern "C" {
    pub fn dBodyCopyPosition(body: dBodyID, pos: *mut dReal);
}
extern "C" {
    pub fn dBodyGetRotation(arg1: dBodyID) -> *const dReal;
}
extern "C" {
    pub fn dBodyCopyRotation(arg1: dBodyID, R: *mut dReal);
}
extern "C" {
    pub fn dBodyGetQuaternion(arg1: dBodyID) -> *const dReal;
}
extern "C" {
    pub fn dBodyCopyQuaternion(body: dBodyID, quat: *mut dReal);
}
extern "C" {
    pub fn dBodyGetLinearVel(arg1: dBodyID) -> *const dReal;
}
extern "C" {
    pub fn dBodyGetAngularVel(arg1: dBodyID) -> *const dReal;
}
extern "C" {
    pub fn dBodySetMass(arg1: dBodyID, mass: *const dMass);
}
extern "C" {
    pub fn dBodyGetMass(arg1: dBodyID, mass: *mut dMass);
}
extern "C" {
    pub fn dBodyAddForce(arg1: dBodyID, fx: dReal, fy: dReal, fz: dReal);
}
extern "C" {
    pub fn dBodyAddTorque(arg1: dBodyID, fx: dReal, fy: dReal, fz: dReal);
}
extern "C" {
    pub fn dBodyAddRelForce(arg1: dBodyID, fx: dReal, fy: dReal, fz: dReal);
}
extern "C" {
    pub fn dBodyAddRelTorque(arg1: dBodyID, fx: dReal, fy: dReal, fz: dReal);
}
extern "C" {
    pub fn dBodyAddForceAtPos(arg1: dBodyID, fx: dReal, fy: dReal, fz: dReal,
                              px: dReal, py: dReal, pz: dReal);
}
extern "C" {
    pub fn dBodyAddForceAtRelPos(arg1: dBodyID, fx: dReal, fy: dReal,
                                 fz: dReal, px: dReal, py: dReal, pz: dReal);
}
extern "C" {
    pub fn dBodyAddRelForceAtPos(arg1: dBodyID, fx: dReal, fy: dReal,
                                 fz: dReal, px: dReal, py: dReal, pz: dReal);
}
extern "C" {
    pub fn dBodyAddRelForceAtRelPos(arg1: dBodyID, fx: dReal, fy: dReal,
                                    fz: dReal, px: dReal, py: dReal,
                                    pz: dReal);
}
extern "C" {
    pub fn dBodyGetForce(arg1: dBodyID) -> *const dReal;
}
extern "C" {
    pub fn dBodyGetTorque(arg1: dBodyID) -> *const dReal;
}
extern "C" {
    pub fn dBodySetForce(b: dBodyID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dBodySetTorque(b: dBodyID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dBodyGetRelPointPos(arg1: dBodyID, px: dReal, py: dReal, pz: dReal,
                               result: *mut dReal);
}
extern "C" {
    pub fn dBodyGetRelPointVel(arg1: dBodyID, px: dReal, py: dReal, pz: dReal,
                               result: *mut dReal);
}
extern "C" {
    pub fn dBodyGetPointVel(arg1: dBodyID, px: dReal, py: dReal, pz: dReal,
                            result: *mut dReal);
}
extern "C" {
    pub fn dBodyGetPosRelPoint(arg1: dBodyID, px: dReal, py: dReal, pz: dReal,
                               result: *mut dReal);
}
extern "C" {
    pub fn dBodyVectorToWorld(arg1: dBodyID, px: dReal, py: dReal, pz: dReal,
                              result: *mut dReal);
}
extern "C" {
    pub fn dBodyVectorFromWorld(arg1: dBodyID, px: dReal, py: dReal,
                                pz: dReal, result: *mut dReal);
}
extern "C" {
    pub fn dBodySetFiniteRotationMode(arg1: dBodyID,
                                      mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dBodySetFiniteRotationAxis(arg1: dBodyID, x: dReal, y: dReal,
                                      z: dReal);
}
extern "C" {
    pub fn dBodyGetFiniteRotationMode(arg1: dBodyID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dBodyGetFiniteRotationAxis(arg1: dBodyID, result: *mut dReal);
}
extern "C" {
    pub fn dBodyGetNumJoints(b: dBodyID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dBodyGetJoint(arg1: dBodyID, index: ::std::os::raw::c_int)
     -> dJointID;
}
extern "C" {
    pub fn dBodySetDynamic(arg1: dBodyID);
}
extern "C" {
    pub fn dBodySetKinematic(arg1: dBodyID);
}
extern "C" {
    pub fn dBodyIsKinematic(arg1: dBodyID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dBodyEnable(arg1: dBodyID);
}
extern "C" {
    pub fn dBodyDisable(arg1: dBodyID);
}
extern "C" {
    pub fn dBodyIsEnabled(arg1: dBodyID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dBodySetGravityMode(b: dBodyID, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dBodyGetGravityMode(b: dBodyID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dBodySetMovedCallback(b: dBodyID,
                                 callback:
                                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                    dBodyID)>);
}
extern "C" {
    pub fn dBodyGetFirstGeom(b: dBodyID) -> dGeomID;
}
extern "C" {
    pub fn dBodyGetNextGeom(g: dGeomID) -> dGeomID;
}
extern "C" {
    pub fn dBodySetDampingDefaults(b: dBodyID);
}
extern "C" {
    pub fn dBodyGetLinearDamping(b: dBodyID) -> dReal;
}
extern "C" {
    pub fn dBodySetLinearDamping(b: dBodyID, scale: dReal);
}
extern "C" {
    pub fn dBodyGetAngularDamping(b: dBodyID) -> dReal;
}
extern "C" {
    pub fn dBodySetAngularDamping(b: dBodyID, scale: dReal);
}
extern "C" {
    pub fn dBodySetDamping(b: dBodyID, linear_scale: dReal,
                           angular_scale: dReal);
}
extern "C" {
    pub fn dBodyGetLinearDampingThreshold(b: dBodyID) -> dReal;
}
extern "C" {
    pub fn dBodySetLinearDampingThreshold(b: dBodyID, threshold: dReal);
}
extern "C" {
    pub fn dBodyGetAngularDampingThreshold(b: dBodyID) -> dReal;
}
extern "C" {
    pub fn dBodySetAngularDampingThreshold(b: dBodyID, threshold: dReal);
}
extern "C" {
    pub fn dBodyGetMaxAngularSpeed(b: dBodyID) -> dReal;
}
extern "C" {
    pub fn dBodySetMaxAngularSpeed(b: dBodyID, max_speed: dReal);
}
extern "C" {
    pub fn dBodyGetGyroscopicMode(b: dBodyID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dBodySetGyroscopicMode(b: dBodyID, enabled: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dJointCreateBall(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
}
extern "C" {
    pub fn dJointCreateHinge(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
}
extern "C" {
    pub fn dJointCreateSlider(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
}
extern "C" {
    pub fn dJointCreateContact(arg1: dWorldID, arg2: dJointGroupID,
                               arg3: *const dContact) -> dJointID;
}
extern "C" {
    pub fn dJointCreateHinge2(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
}
extern "C" {
    pub fn dJointCreateUniversal(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
}
extern "C" {
    pub fn dJointCreatePR(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
}
extern "C" {
    pub fn dJointCreatePU(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
}
extern "C" {
    pub fn dJointCreatePiston(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
}
extern "C" {
    pub fn dJointCreateFixed(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
}
extern "C" {
    pub fn dJointCreateNull(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
}
extern "C" {
    pub fn dJointCreateAMotor(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
}
extern "C" {
    pub fn dJointCreateLMotor(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
}
extern "C" {
    pub fn dJointCreatePlane2D(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
}
extern "C" {
    pub fn dJointCreateDBall(arg1: dWorldID, arg2: dJointGroupID) -> dJointID;
}
extern "C" {
    pub fn dJointCreateDHinge(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
}
extern "C" {
    pub fn dJointCreateTransmission(arg1: dWorldID, arg2: dJointGroupID)
     -> dJointID;
}
extern "C" {
    pub fn dJointDestroy(arg1: dJointID);
}
extern "C" {
    pub fn dJointGroupCreate(max_size: ::std::os::raw::c_int)
     -> dJointGroupID;
}
extern "C" {
    pub fn dJointGroupDestroy(arg1: dJointGroupID);
}
extern "C" {
    pub fn dJointGroupEmpty(arg1: dJointGroupID);
}
extern "C" {
    pub fn dJointGetNumBodies(arg1: dJointID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dJointAttach(arg1: dJointID, body1: dBodyID, body2: dBodyID);
}
extern "C" {
    pub fn dJointEnable(arg1: dJointID);
}
extern "C" {
    pub fn dJointDisable(arg1: dJointID);
}
extern "C" {
    pub fn dJointIsEnabled(arg1: dJointID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dJointSetData(arg1: dJointID, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dJointGetData(arg1: dJointID) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dJointGetType(arg1: dJointID) -> dJointType;
}
extern "C" {
    pub fn dJointGetBody(arg1: dJointID, index: ::std::os::raw::c_int)
     -> dBodyID;
}
extern "C" {
    pub fn dJointSetFeedback(arg1: dJointID, arg2: *mut dJointFeedback);
}
extern "C" {
    pub fn dJointGetFeedback(arg1: dJointID) -> *mut dJointFeedback;
}
extern "C" {
    pub fn dJointSetBallAnchor(arg1: dJointID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dJointSetBallAnchor2(arg1: dJointID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dJointSetBallParam(arg1: dJointID,
                              parameter: ::std::os::raw::c_int, value: dReal);
}
extern "C" {
    pub fn dJointSetHingeAnchor(arg1: dJointID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dJointSetHingeAnchorDelta(arg1: dJointID, x: dReal, y: dReal,
                                     z: dReal, ax: dReal, ay: dReal,
                                     az: dReal);
}
extern "C" {
    pub fn dJointSetHingeAxis(arg1: dJointID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dJointSetHingeAxisOffset(j: dJointID, x: dReal, y: dReal, z: dReal,
                                    angle: dReal);
}
extern "C" {
    pub fn dJointSetHingeParam(arg1: dJointID,
                               parameter: ::std::os::raw::c_int,
                               value: dReal);
}
extern "C" {
    pub fn dJointAddHingeTorque(joint: dJointID, torque: dReal);
}
extern "C" {
    pub fn dJointSetSliderAxis(arg1: dJointID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dJointSetSliderAxisDelta(arg1: dJointID, x: dReal, y: dReal,
                                    z: dReal, ax: dReal, ay: dReal,
                                    az: dReal);
}
extern "C" {
    pub fn dJointSetSliderParam(arg1: dJointID,
                                parameter: ::std::os::raw::c_int,
                                value: dReal);
}
extern "C" {
    pub fn dJointAddSliderForce(joint: dJointID, force: dReal);
}
extern "C" {
    pub fn dJointSetHinge2Anchor(arg1: dJointID, x: dReal, y: dReal,
                                 z: dReal);
}
extern "C" {
    pub fn dJointSetHinge2Axis1(arg1: dJointID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dJointSetHinge2Axis2(arg1: dJointID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dJointSetHinge2Param(arg1: dJointID,
                                parameter: ::std::os::raw::c_int,
                                value: dReal);
}
extern "C" {
    pub fn dJointAddHinge2Torques(joint: dJointID, torque1: dReal,
                                  torque2: dReal);
}
extern "C" {
    pub fn dJointSetUniversalAnchor(arg1: dJointID, x: dReal, y: dReal,
                                    z: dReal);
}
extern "C" {
    pub fn dJointSetUniversalAxis1(arg1: dJointID, x: dReal, y: dReal,
                                   z: dReal);
}
extern "C" {
    pub fn dJointSetUniversalAxis1Offset(arg1: dJointID, x: dReal, y: dReal,
                                         z: dReal, offset1: dReal,
                                         offset2: dReal);
}
extern "C" {
    pub fn dJointSetUniversalAxis2(arg1: dJointID, x: dReal, y: dReal,
                                   z: dReal);
}
extern "C" {
    pub fn dJointSetUniversalAxis2Offset(arg1: dJointID, x: dReal, y: dReal,
                                         z: dReal, offset1: dReal,
                                         offset2: dReal);
}
extern "C" {
    pub fn dJointSetUniversalParam(arg1: dJointID,
                                   parameter: ::std::os::raw::c_int,
                                   value: dReal);
}
extern "C" {
    pub fn dJointAddUniversalTorques(joint: dJointID, torque1: dReal,
                                     torque2: dReal);
}
extern "C" {
    pub fn dJointSetPRAnchor(arg1: dJointID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dJointSetPRAxis1(arg1: dJointID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dJointSetPRAxis2(arg1: dJointID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dJointSetPRParam(arg1: dJointID, parameter: ::std::os::raw::c_int,
                            value: dReal);
}
extern "C" {
    pub fn dJointAddPRTorque(j: dJointID, torque: dReal);
}
extern "C" {
    pub fn dJointSetPUAnchor(arg1: dJointID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dJointSetPUAnchorDelta(arg1: dJointID, x: dReal, y: dReal,
                                  z: dReal, dx: dReal, dy: dReal, dz: dReal);
}
extern "C" {
    pub fn dJointSetPUAnchorOffset(arg1: dJointID, x: dReal, y: dReal,
                                   z: dReal, dx: dReal, dy: dReal, dz: dReal);
}
extern "C" {
    pub fn dJointSetPUAxis1(arg1: dJointID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dJointSetPUAxis2(arg1: dJointID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dJointSetPUAxis3(arg1: dJointID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dJointSetPUAxisP(id: dJointID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dJointSetPUParam(arg1: dJointID, parameter: ::std::os::raw::c_int,
                            value: dReal);
}
extern "C" {
    pub fn dJointAddPUTorque(j: dJointID, torque: dReal);
}
extern "C" {
    pub fn dJointSetPistonAnchor(arg1: dJointID, x: dReal, y: dReal,
                                 z: dReal);
}
extern "C" {
    pub fn dJointSetPistonAnchorOffset(j: dJointID, x: dReal, y: dReal,
                                       z: dReal, dx: dReal, dy: dReal,
                                       dz: dReal);
}
extern "C" {
    pub fn dJointSetPistonAxis(arg1: dJointID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dJointSetPistonAxisDelta(j: dJointID, x: dReal, y: dReal, z: dReal,
                                    ax: dReal, ay: dReal, az: dReal);
}
extern "C" {
    pub fn dJointSetPistonParam(arg1: dJointID,
                                parameter: ::std::os::raw::c_int,
                                value: dReal);
}
extern "C" {
    pub fn dJointAddPistonForce(joint: dJointID, force: dReal);
}
extern "C" {
    pub fn dJointSetFixed(arg1: dJointID);
}
extern "C" {
    pub fn dJointSetFixedParam(arg1: dJointID,
                               parameter: ::std::os::raw::c_int,
                               value: dReal);
}
extern "C" {
    pub fn dJointSetAMotorNumAxes(arg1: dJointID, num: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dJointSetAMotorAxis(arg1: dJointID, anum: ::std::os::raw::c_int,
                               rel: ::std::os::raw::c_int, x: dReal, y: dReal,
                               z: dReal);
}
extern "C" {
    pub fn dJointSetAMotorAngle(arg1: dJointID, anum: ::std::os::raw::c_int,
                                angle: dReal);
}
extern "C" {
    pub fn dJointSetAMotorParam(arg1: dJointID,
                                parameter: ::std::os::raw::c_int,
                                value: dReal);
}
extern "C" {
    pub fn dJointSetAMotorMode(arg1: dJointID, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dJointAddAMotorTorques(arg1: dJointID, torque1: dReal,
                                  torque2: dReal, torque3: dReal);
}
extern "C" {
    pub fn dJointSetLMotorNumAxes(arg1: dJointID, num: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dJointSetLMotorAxis(arg1: dJointID, anum: ::std::os::raw::c_int,
                               rel: ::std::os::raw::c_int, x: dReal, y: dReal,
                               z: dReal);
}
extern "C" {
    pub fn dJointSetLMotorParam(arg1: dJointID,
                                parameter: ::std::os::raw::c_int,
                                value: dReal);
}
extern "C" {
    pub fn dJointSetPlane2DXParam(arg1: dJointID,
                                  parameter: ::std::os::raw::c_int,
                                  value: dReal);
}
extern "C" {
    pub fn dJointSetPlane2DYParam(arg1: dJointID,
                                  parameter: ::std::os::raw::c_int,
                                  value: dReal);
}
extern "C" {
    pub fn dJointSetPlane2DAngleParam(arg1: dJointID,
                                      parameter: ::std::os::raw::c_int,
                                      value: dReal);
}
extern "C" {
    pub fn dJointGetBallAnchor(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetBallAnchor2(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetBallParam(arg1: dJointID,
                              parameter: ::std::os::raw::c_int) -> dReal;
}
extern "C" {
    pub fn dJointGetHingeAnchor(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetHingeAnchor2(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetHingeAxis(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetHingeParam(arg1: dJointID,
                               parameter: ::std::os::raw::c_int) -> dReal;
}
extern "C" {
    pub fn dJointGetHingeAngle(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetHingeAngleRate(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetSliderPosition(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetSliderPositionRate(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetSliderAxis(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetSliderParam(arg1: dJointID,
                                parameter: ::std::os::raw::c_int) -> dReal;
}
extern "C" {
    pub fn dJointGetHinge2Anchor(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetHinge2Anchor2(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetHinge2Axis1(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetHinge2Axis2(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetHinge2Param(arg1: dJointID,
                                parameter: ::std::os::raw::c_int) -> dReal;
}
extern "C" {
    pub fn dJointGetHinge2Angle1(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetHinge2Angle2(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetHinge2Angle1Rate(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetHinge2Angle2Rate(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetUniversalAnchor(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetUniversalAnchor2(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetUniversalAxis1(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetUniversalAxis2(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetUniversalParam(arg1: dJointID,
                                   parameter: ::std::os::raw::c_int) -> dReal;
}
extern "C" {
    pub fn dJointGetUniversalAngles(arg1: dJointID, angle1: *mut dReal,
                                    angle2: *mut dReal);
}
extern "C" {
    pub fn dJointGetUniversalAngle1(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetUniversalAngle2(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetUniversalAngle1Rate(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetUniversalAngle2Rate(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetPRAnchor(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetPRPosition(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetPRPositionRate(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetPRAngle(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetPRAngleRate(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetPRAxis1(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetPRAxis2(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetPRParam(arg1: dJointID, parameter: ::std::os::raw::c_int)
     -> dReal;
}
extern "C" {
    pub fn dJointGetPUAnchor(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetPUPosition(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetPUPositionRate(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetPUAxis1(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetPUAxis2(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetPUAxis3(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetPUAxisP(id: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetPUAngles(arg1: dJointID, angle1: *mut dReal,
                             angle2: *mut dReal);
}
extern "C" {
    pub fn dJointGetPUAngle1(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetPUAngle1Rate(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetPUAngle2(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetPUAngle2Rate(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetPUParam(arg1: dJointID, parameter: ::std::os::raw::c_int)
     -> dReal;
}
extern "C" {
    pub fn dJointGetPistonPosition(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetPistonPositionRate(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetPistonAngle(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetPistonAngleRate(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetPistonAnchor(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetPistonAnchor2(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetPistonAxis(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetPistonParam(arg1: dJointID,
                                parameter: ::std::os::raw::c_int) -> dReal;
}
extern "C" {
    pub fn dJointGetAMotorNumAxes(arg1: dJointID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dJointGetAMotorAxis(arg1: dJointID, anum: ::std::os::raw::c_int,
                               result: *mut dReal);
}
extern "C" {
    pub fn dJointGetAMotorAxisRel(arg1: dJointID, anum: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dJointGetAMotorAngle(arg1: dJointID, anum: ::std::os::raw::c_int)
     -> dReal;
}
extern "C" {
    pub fn dJointGetAMotorAngleRate(arg1: dJointID,
                                    anum: ::std::os::raw::c_int) -> dReal;
}
extern "C" {
    pub fn dJointGetAMotorParam(arg1: dJointID,
                                parameter: ::std::os::raw::c_int) -> dReal;
}
extern "C" {
    pub fn dJointGetAMotorMode(arg1: dJointID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dJointGetLMotorNumAxes(arg1: dJointID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dJointGetLMotorAxis(arg1: dJointID, anum: ::std::os::raw::c_int,
                               result: *mut dReal);
}
extern "C" {
    pub fn dJointGetLMotorParam(arg1: dJointID,
                                parameter: ::std::os::raw::c_int) -> dReal;
}
extern "C" {
    pub fn dJointGetFixedParam(arg1: dJointID,
                               parameter: ::std::os::raw::c_int) -> dReal;
}
extern "C" {
    pub fn dJointGetTransmissionContactPoint1(arg1: dJointID,
                                              result: *mut dReal);
}
extern "C" {
    pub fn dJointGetTransmissionContactPoint2(arg1: dJointID,
                                              result: *mut dReal);
}
extern "C" {
    pub fn dJointSetTransmissionAxis1(arg1: dJointID, x: dReal, y: dReal,
                                      z: dReal);
}
extern "C" {
    pub fn dJointGetTransmissionAxis1(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointSetTransmissionAxis2(arg1: dJointID, x: dReal, y: dReal,
                                      z: dReal);
}
extern "C" {
    pub fn dJointGetTransmissionAxis2(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointSetTransmissionAnchor1(arg1: dJointID, x: dReal, y: dReal,
                                        z: dReal);
}
extern "C" {
    pub fn dJointGetTransmissionAnchor1(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointSetTransmissionAnchor2(arg1: dJointID, x: dReal, y: dReal,
                                        z: dReal);
}
extern "C" {
    pub fn dJointGetTransmissionAnchor2(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointSetTransmissionParam(arg1: dJointID,
                                      parameter: ::std::os::raw::c_int,
                                      value: dReal);
}
extern "C" {
    pub fn dJointGetTransmissionParam(arg1: dJointID,
                                      parameter: ::std::os::raw::c_int)
     -> dReal;
}
extern "C" {
    pub fn dJointSetTransmissionMode(j: dJointID,
                                     mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dJointGetTransmissionMode(j: dJointID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dJointSetTransmissionRatio(j: dJointID, ratio: dReal);
}
extern "C" {
    pub fn dJointGetTransmissionRatio(j: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointSetTransmissionAxis(j: dJointID, x: dReal, y: dReal,
                                     z: dReal);
}
extern "C" {
    pub fn dJointGetTransmissionAxis(j: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetTransmissionAngle1(j: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetTransmissionAngle2(j: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetTransmissionRadius1(j: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointGetTransmissionRadius2(j: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointSetTransmissionRadius1(j: dJointID, radius: dReal);
}
extern "C" {
    pub fn dJointSetTransmissionRadius2(j: dJointID, radius: dReal);
}
extern "C" {
    pub fn dJointGetTransmissionBacklash(j: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointSetTransmissionBacklash(j: dJointID, backlash: dReal);
}
extern "C" {
    pub fn dJointSetDBallAnchor1(arg1: dJointID, x: dReal, y: dReal,
                                 z: dReal);
}
extern "C" {
    pub fn dJointSetDBallAnchor2(arg1: dJointID, x: dReal, y: dReal,
                                 z: dReal);
}
extern "C" {
    pub fn dJointGetDBallAnchor1(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetDBallAnchor2(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetDBallDistance(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointSetDBallDistance(arg1: dJointID, dist: dReal);
}
extern "C" {
    pub fn dJointSetDBallParam(arg1: dJointID,
                               parameter: ::std::os::raw::c_int,
                               value: dReal);
}
extern "C" {
    pub fn dJointGetDBallParam(arg1: dJointID,
                               parameter: ::std::os::raw::c_int) -> dReal;
}
extern "C" {
    pub fn dJointSetDHingeAxis(arg1: dJointID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dJointGetDHingeAxis(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointSetDHingeAnchor1(arg1: dJointID, x: dReal, y: dReal,
                                  z: dReal);
}
extern "C" {
    pub fn dJointSetDHingeAnchor2(arg1: dJointID, x: dReal, y: dReal,
                                  z: dReal);
}
extern "C" {
    pub fn dJointGetDHingeAnchor1(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetDHingeAnchor2(arg1: dJointID, result: *mut dReal);
}
extern "C" {
    pub fn dJointGetDHingeDistance(arg1: dJointID) -> dReal;
}
extern "C" {
    pub fn dJointSetDHingeParam(arg1: dJointID,
                                parameter: ::std::os::raw::c_int,
                                value: dReal);
}
extern "C" {
    pub fn dJointGetDHingeParam(arg1: dJointID,
                                parameter: ::std::os::raw::c_int) -> dReal;
}
extern "C" {
    pub fn dConnectingJoint(arg1: dBodyID, arg2: dBodyID) -> dJointID;
}
extern "C" {
    pub fn dConnectingJointList(arg1: dBodyID, arg2: dBodyID,
                                arg3: *mut dJointID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dAreConnected(arg1: dBodyID, arg2: dBodyID)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dAreConnectedExcluding(body1: dBodyID, body2: dBodyID,
                                  joint_type: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
pub type dNearCallback =
    ::std::option::Option<unsafe extern "C" fn(data:
                                                   *mut ::std::os::raw::c_void,
                                               o1: dGeomID, o2: dGeomID)>;
extern "C" {
    pub fn dSimpleSpaceCreate(space: dSpaceID) -> dSpaceID;
}
extern "C" {
    pub fn dHashSpaceCreate(space: dSpaceID) -> dSpaceID;
}
extern "C" {
    pub fn dQuadTreeSpaceCreate(space: dSpaceID, Center: *const dReal,
                                Extents: *const dReal,
                                Depth: ::std::os::raw::c_int) -> dSpaceID;
}
extern "C" {
    pub fn dSweepAndPruneSpaceCreate(space: dSpaceID,
                                     axisorder: ::std::os::raw::c_int)
     -> dSpaceID;
}
extern "C" {
    pub fn dSpaceDestroy(arg1: dSpaceID);
}
extern "C" {
    pub fn dHashSpaceSetLevels(space: dSpaceID,
                               minlevel: ::std::os::raw::c_int,
                               maxlevel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dHashSpaceGetLevels(space: dSpaceID,
                               minlevel: *mut ::std::os::raw::c_int,
                               maxlevel: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn dSpaceSetCleanup(space: dSpaceID, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dSpaceGetCleanup(space: dSpaceID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dSpaceSetSublevel(space: dSpaceID,
                             sublevel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dSpaceGetSublevel(space: dSpaceID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dSpaceSetManualCleanup(space: dSpaceID,
                                  mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dSpaceGetManualCleanup(space: dSpaceID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dSpaceAdd(arg1: dSpaceID, arg2: dGeomID);
}
extern "C" {
    pub fn dSpaceRemove(arg1: dSpaceID, arg2: dGeomID);
}
extern "C" {
    pub fn dSpaceQuery(arg1: dSpaceID, arg2: dGeomID)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dSpaceClean(arg1: dSpaceID);
}
extern "C" {
    pub fn dSpaceGetNumGeoms(arg1: dSpaceID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dSpaceGetGeom(arg1: dSpaceID, i: ::std::os::raw::c_int) -> dGeomID;
}
extern "C" {
    pub fn dSpaceGetClass(space: dSpaceID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dGeomDestroy(geom: dGeomID);
}
extern "C" {
    pub fn dGeomSetData(geom: dGeomID, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dGeomGetData(geom: dGeomID) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dGeomSetBody(geom: dGeomID, body: dBodyID);
}
extern "C" {
    pub fn dGeomGetBody(geom: dGeomID) -> dBodyID;
}
extern "C" {
    pub fn dGeomSetPosition(geom: dGeomID, x: dReal, y: dReal, z: dReal);
}
extern "C" {
    pub fn dGeomSetRotation(geom: dGeomID, R: *const dReal);
}
extern "C" {
    pub fn dGeomSetQuaternion(geom: dGeomID, Q: *const dReal);
}
extern "C" {
    pub fn dGeomGetPosition(geom: dGeomID) -> *const dReal;
}
extern "C" {
    pub fn dGeomCopyPosition(geom: dGeomID, pos: *mut dReal);
}
extern "C" {
    pub fn dGeomGetRotation(geom: dGeomID) -> *const dReal;
}
extern "C" {
    pub fn dGeomCopyRotation(geom: dGeomID, R: *mut dReal);
}
extern "C" {
    pub fn dGeomGetQuaternion(geom: dGeomID, result: *mut dReal);
}
extern "C" {
    pub fn dGeomGetAABB(geom: dGeomID, aabb: *mut dReal);
}
extern "C" {
    pub fn dGeomIsSpace(geom: dGeomID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dGeomGetSpace(arg1: dGeomID) -> dSpaceID;
}
extern "C" {
    pub fn dGeomGetClass(geom: dGeomID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dGeomSetCategoryBits(geom: dGeomID, bits: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn dGeomSetCollideBits(geom: dGeomID, bits: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn dGeomGetCategoryBits(arg1: dGeomID) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn dGeomGetCollideBits(arg1: dGeomID) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn dGeomEnable(geom: dGeomID);
}
extern "C" {
    pub fn dGeomDisable(geom: dGeomID);
}
extern "C" {
    pub fn dGeomIsEnabled(geom: dGeomID) -> ::std::os::raw::c_int;
}
pub const dGeomCommonControlClass: _bindgen_ty_29 =
    _bindgen_ty_29::dGeomCommonControlClass;
pub const dGeomColliderControlClass: _bindgen_ty_29 =
    _bindgen_ty_29::dGeomColliderControlClass;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_29 {
    dGeomCommonControlClass = 0,
    dGeomColliderControlClass = 1,
}
pub const dGeomCommonAnyControlCode: _bindgen_ty_30 =
    _bindgen_ty_30::dGeomCommonAnyControlCode;
pub const dGeomColliderSetMergeSphereContactsControlCode: _bindgen_ty_30 =
    _bindgen_ty_30::dGeomColliderSetMergeSphereContactsControlCode;
pub const dGeomColliderGetMergeSphereContactsControlCode: _bindgen_ty_30 =
    _bindgen_ty_30::dGeomColliderGetMergeSphereContactsControlCode;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_30 {
    dGeomCommonAnyControlCode = 0,
    dGeomColliderSetMergeSphereContactsControlCode = 1,
    dGeomColliderGetMergeSphereContactsControlCode = 2,
}
pub const dGeomColliderMergeContactsValue__Default: _bindgen_ty_31 =
    _bindgen_ty_31::dGeomColliderMergeContactsValue__Default;
pub const dGeomColliderMergeContactsValue_None: _bindgen_ty_31 =
    _bindgen_ty_31::dGeomColliderMergeContactsValue_None;
pub const dGeomColliderMergeContactsValue_Normals: _bindgen_ty_31 =
    _bindgen_ty_31::dGeomColliderMergeContactsValue_Normals;
pub const dGeomColliderMergeContactsValue_Full: _bindgen_ty_31 =
    _bindgen_ty_31::dGeomColliderMergeContactsValue_Full;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_31 {
    dGeomColliderMergeContactsValue__Default = 0,
    dGeomColliderMergeContactsValue_None = 1,
    dGeomColliderMergeContactsValue_Normals = 2,
    dGeomColliderMergeContactsValue_Full = 3,
}
extern "C" {
    pub fn dGeomLowLevelControl(geom: dGeomID,
                                controlClass: ::std::os::raw::c_int,
                                controlCode: ::std::os::raw::c_int,
                                dataValue: *mut ::std::os::raw::c_void,
                                dataSize: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dGeomGetRelPointPos(geom: dGeomID, px: dReal, py: dReal, pz: dReal,
                               result: *mut dReal);
}
extern "C" {
    pub fn dGeomGetPosRelPoint(geom: dGeomID, px: dReal, py: dReal, pz: dReal,
                               result: *mut dReal);
}
extern "C" {
    pub fn dGeomVectorToWorld(geom: dGeomID, px: dReal, py: dReal, pz: dReal,
                              result: *mut dReal);
}
extern "C" {
    pub fn dGeomVectorFromWorld(geom: dGeomID, px: dReal, py: dReal,
                                pz: dReal, result: *mut dReal);
}
extern "C" {
    pub fn dGeomSetOffsetPosition(geom: dGeomID, x: dReal, y: dReal,
                                  z: dReal);
}
extern "C" {
    pub fn dGeomSetOffsetRotation(geom: dGeomID, R: *const dReal);
}
extern "C" {
    pub fn dGeomSetOffsetQuaternion(geom: dGeomID, Q: *const dReal);
}
extern "C" {
    pub fn dGeomSetOffsetWorldPosition(geom: dGeomID, x: dReal, y: dReal,
                                       z: dReal);
}
extern "C" {
    pub fn dGeomSetOffsetWorldRotation(geom: dGeomID, R: *const dReal);
}
extern "C" {
    pub fn dGeomSetOffsetWorldQuaternion(geom: dGeomID, arg1: *const dReal);
}
extern "C" {
    pub fn dGeomClearOffset(geom: dGeomID);
}
extern "C" {
    pub fn dGeomIsOffset(geom: dGeomID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dGeomGetOffsetPosition(geom: dGeomID) -> *const dReal;
}
extern "C" {
    pub fn dGeomCopyOffsetPosition(geom: dGeomID, pos: *mut dReal);
}
extern "C" {
    pub fn dGeomGetOffsetRotation(geom: dGeomID) -> *const dReal;
}
extern "C" {
    pub fn dGeomCopyOffsetRotation(geom: dGeomID, R: *mut dReal);
}
extern "C" {
    pub fn dGeomGetOffsetQuaternion(geom: dGeomID, result: *mut dReal);
}
extern "C" {
    pub fn dCollide(o1: dGeomID, o2: dGeomID, flags: ::std::os::raw::c_int,
                    contact: *mut dContactGeom, skip: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dSpaceCollide(space: dSpaceID, data: *mut ::std::os::raw::c_void,
                         callback: dNearCallback);
}
extern "C" {
    pub fn dSpaceCollide2(space1: dGeomID, space2: dGeomID,
                          data: *mut ::std::os::raw::c_void,
                          callback: dNearCallback);
}
pub const dMaxUserClasses: _bindgen_ty_32 = _bindgen_ty_32::dMaxUserClasses;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_32 { dMaxUserClasses = 4, }
pub const dSphereClass: _bindgen_ty_33 = _bindgen_ty_33::dSphereClass;
pub const dBoxClass: _bindgen_ty_33 = _bindgen_ty_33::dBoxClass;
pub const dCapsuleClass: _bindgen_ty_33 = _bindgen_ty_33::dCapsuleClass;
pub const dCylinderClass: _bindgen_ty_33 = _bindgen_ty_33::dCylinderClass;
pub const dPlaneClass: _bindgen_ty_33 = _bindgen_ty_33::dPlaneClass;
pub const dRayClass: _bindgen_ty_33 = _bindgen_ty_33::dRayClass;
pub const dConvexClass: _bindgen_ty_33 = _bindgen_ty_33::dConvexClass;
pub const dGeomTransformClass: _bindgen_ty_33 =
    _bindgen_ty_33::dGeomTransformClass;
pub const dTriMeshClass: _bindgen_ty_33 = _bindgen_ty_33::dTriMeshClass;
pub const dHeightfieldClass: _bindgen_ty_33 =
    _bindgen_ty_33::dHeightfieldClass;
pub const dFirstSpaceClass: _bindgen_ty_33 = _bindgen_ty_33::dFirstSpaceClass;
pub const dSimpleSpaceClass: _bindgen_ty_33 =
    _bindgen_ty_33::dFirstSpaceClass;
pub const dHashSpaceClass: _bindgen_ty_33 = _bindgen_ty_33::dHashSpaceClass;
pub const dSweepAndPruneSpaceClass: _bindgen_ty_33 =
    _bindgen_ty_33::dSweepAndPruneSpaceClass;
pub const dQuadTreeSpaceClass: _bindgen_ty_33 =
    _bindgen_ty_33::dQuadTreeSpaceClass;
pub const dLastSpaceClass: _bindgen_ty_33 =
    _bindgen_ty_33::dQuadTreeSpaceClass;
pub const dFirstUserClass: _bindgen_ty_33 = _bindgen_ty_33::dFirstUserClass;
pub const dLastUserClass: _bindgen_ty_33 = _bindgen_ty_33::dLastUserClass;
pub const dGeomNumClasses: _bindgen_ty_33 = _bindgen_ty_33::dGeomNumClasses;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_33 {
    dSphereClass = 0,
    dBoxClass = 1,
    dCapsuleClass = 2,
    dCylinderClass = 3,
    dPlaneClass = 4,
    dRayClass = 5,
    dConvexClass = 6,
    dGeomTransformClass = 7,
    dTriMeshClass = 8,
    dHeightfieldClass = 9,
    dFirstSpaceClass = 10,
    dHashSpaceClass = 11,
    dSweepAndPruneSpaceClass = 12,
    dQuadTreeSpaceClass = 13,
    dFirstUserClass = 14,
    dLastUserClass = 17,
    dGeomNumClasses = 18,
}
extern "C" {
    pub fn dCreateSphere(space: dSpaceID, radius: dReal) -> dGeomID;
}
extern "C" {
    pub fn dGeomSphereSetRadius(sphere: dGeomID, radius: dReal);
}
extern "C" {
    pub fn dGeomSphereGetRadius(sphere: dGeomID) -> dReal;
}
extern "C" {
    pub fn dGeomSpherePointDepth(sphere: dGeomID, x: dReal, y: dReal,
                                 z: dReal) -> dReal;
}
extern "C" {
    pub fn dCreateConvex(space: dSpaceID, _planes: *const dReal,
                         _planecount: ::std::os::raw::c_uint,
                         _points: *const dReal,
                         _pointcount: ::std::os::raw::c_uint,
                         _polygons: *const ::std::os::raw::c_uint) -> dGeomID;
}
extern "C" {
    pub fn dGeomSetConvex(g: dGeomID, _planes: *const dReal,
                          _count: ::std::os::raw::c_uint,
                          _points: *const dReal,
                          _pointcount: ::std::os::raw::c_uint,
                          _polygons: *const ::std::os::raw::c_uint);
}
extern "C" {
    pub fn dCreateBox(space: dSpaceID, lx: dReal, ly: dReal, lz: dReal)
     -> dGeomID;
}
extern "C" {
    pub fn dGeomBoxSetLengths(box_: dGeomID, lx: dReal, ly: dReal, lz: dReal);
}
extern "C" {
    pub fn dGeomBoxGetLengths(box_: dGeomID, result: *mut dReal);
}
extern "C" {
    pub fn dGeomBoxPointDepth(box_: dGeomID, x: dReal, y: dReal, z: dReal)
     -> dReal;
}
extern "C" {
    pub fn dCreatePlane(space: dSpaceID, a: dReal, b: dReal, c: dReal,
                        d: dReal) -> dGeomID;
}
extern "C" {
    pub fn dGeomPlaneSetParams(plane: dGeomID, a: dReal, b: dReal, c: dReal,
                               d: dReal);
}
extern "C" {
    pub fn dGeomPlaneGetParams(plane: dGeomID, result: *mut dReal);
}
extern "C" {
    pub fn dGeomPlanePointDepth(plane: dGeomID, x: dReal, y: dReal, z: dReal)
     -> dReal;
}
extern "C" {
    pub fn dCreateCapsule(space: dSpaceID, radius: dReal, length: dReal)
     -> dGeomID;
}
extern "C" {
    pub fn dGeomCapsuleSetParams(ccylinder: dGeomID, radius: dReal,
                                 length: dReal);
}
extern "C" {
    pub fn dGeomCapsuleGetParams(ccylinder: dGeomID, radius: *mut dReal,
                                 length: *mut dReal);
}
extern "C" {
    pub fn dGeomCapsulePointDepth(ccylinder: dGeomID, x: dReal, y: dReal,
                                  z: dReal) -> dReal;
}
extern "C" {
    pub fn dCreateCylinder(space: dSpaceID, radius: dReal, length: dReal)
     -> dGeomID;
}
extern "C" {
    pub fn dGeomCylinderSetParams(cylinder: dGeomID, radius: dReal,
                                  length: dReal);
}
extern "C" {
    pub fn dGeomCylinderGetParams(cylinder: dGeomID, radius: *mut dReal,
                                  length: *mut dReal);
}
extern "C" {
    pub fn dCreateRay(space: dSpaceID, length: dReal) -> dGeomID;
}
extern "C" {
    pub fn dGeomRaySetLength(ray: dGeomID, length: dReal);
}
extern "C" {
    pub fn dGeomRayGetLength(ray: dGeomID) -> dReal;
}
extern "C" {
    pub fn dGeomRaySet(ray: dGeomID, px: dReal, py: dReal, pz: dReal,
                       dx: dReal, dy: dReal, dz: dReal);
}
extern "C" {
    pub fn dGeomRayGet(ray: dGeomID, start: *mut dReal, dir: *mut dReal);
}
extern "C" {
    pub fn dGeomRaySetParams(g: dGeomID, FirstContact: ::std::os::raw::c_int,
                             BackfaceCull: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dGeomRayGetParams(g: dGeomID,
                             FirstContact: *mut ::std::os::raw::c_int,
                             BackfaceCull: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn dGeomRaySetFirstContact(g: dGeomID,
                                   firstContact: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dGeomRayGetFirstContact(g: dGeomID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dGeomRaySetBackfaceCull(g: dGeomID,
                                   backfaceCull: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dGeomRayGetBackfaceCull(g: dGeomID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dGeomRaySetClosestHit(g: dGeomID,
                                 closestHit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dGeomRayGetClosestHit(g: dGeomID) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dxTriMeshData {
    pub _address: u8,
}
impl Clone for dxTriMeshData {
    fn clone(&self) -> Self { *self }
}
pub type dTriMeshDataID = *mut dxTriMeshData;
extern "C" {
    pub fn dGeomTriMeshDataCreate() -> dTriMeshDataID;
}
extern "C" {
    pub fn dGeomTriMeshDataDestroy(g: dTriMeshDataID);
}
pub const TRIMESH_FACE_NORMALS: _bindgen_ty_34 =
    _bindgen_ty_34::TRIMESH_FACE_NORMALS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_34 { TRIMESH_FACE_NORMALS = 0, }
extern "C" {
    pub fn dGeomTriMeshDataSet(g: dTriMeshDataID,
                               data_id: ::std::os::raw::c_int,
                               in_data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dGeomTriMeshDataGet(g: dTriMeshDataID,
                               data_id: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dGeomTriMeshSetLastTransform(g: dGeomID, last_trans: *mut dReal);
}
extern "C" {
    pub fn dGeomTriMeshGetLastTransform(g: dGeomID) -> *mut dReal;
}
extern "C" {
    pub fn dGeomTriMeshDataBuildSingle(g: dTriMeshDataID,
                                       Vertices:
                                           *const ::std::os::raw::c_void,
                                       VertexStride: ::std::os::raw::c_int,
                                       VertexCount: ::std::os::raw::c_int,
                                       Indices: *const ::std::os::raw::c_void,
                                       IndexCount: ::std::os::raw::c_int,
                                       TriStride: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dGeomTriMeshDataBuildSingle1(g: dTriMeshDataID,
                                        Vertices:
                                            *const ::std::os::raw::c_void,
                                        VertexStride: ::std::os::raw::c_int,
                                        VertexCount: ::std::os::raw::c_int,
                                        Indices:
                                            *const ::std::os::raw::c_void,
                                        IndexCount: ::std::os::raw::c_int,
                                        TriStride: ::std::os::raw::c_int,
                                        Normals:
                                            *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn dGeomTriMeshDataBuildDouble(g: dTriMeshDataID,
                                       Vertices:
                                           *const ::std::os::raw::c_void,
                                       VertexStride: ::std::os::raw::c_int,
                                       VertexCount: ::std::os::raw::c_int,
                                       Indices: *const ::std::os::raw::c_void,
                                       IndexCount: ::std::os::raw::c_int,
                                       TriStride: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dGeomTriMeshDataBuildDouble1(g: dTriMeshDataID,
                                        Vertices:
                                            *const ::std::os::raw::c_void,
                                        VertexStride: ::std::os::raw::c_int,
                                        VertexCount: ::std::os::raw::c_int,
                                        Indices:
                                            *const ::std::os::raw::c_void,
                                        IndexCount: ::std::os::raw::c_int,
                                        TriStride: ::std::os::raw::c_int,
                                        Normals:
                                            *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn dGeomTriMeshDataBuildSimple(g: dTriMeshDataID,
                                       Vertices: *const dReal,
                                       VertexCount: ::std::os::raw::c_int,
                                       Indices: *const dTriIndex,
                                       IndexCount: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dGeomTriMeshDataBuildSimple1(g: dTriMeshDataID,
                                        Vertices: *const dReal,
                                        VertexCount: ::std::os::raw::c_int,
                                        Indices: *const dTriIndex,
                                        IndexCount: ::std::os::raw::c_int,
                                        Normals:
                                            *const ::std::os::raw::c_int);
}
extern "C" {
    pub fn dGeomTriMeshDataPreprocess(g: dTriMeshDataID);
}
extern "C" {
    pub fn dGeomTriMeshDataGetBuffer(g: dTriMeshDataID,
                                     buf: *mut *mut ::std::os::raw::c_uchar,
                                     bufLen: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn dGeomTriMeshDataSetBuffer(g: dTriMeshDataID,
                                     buf: *mut ::std::os::raw::c_uchar);
}
pub type dTriCallback =
    ::std::option::Option<unsafe extern "C" fn(TriMesh: dGeomID,
                                               RefObject: dGeomID,
                                               TriangleIndex:
                                                   ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn dGeomTriMeshSetCallback(g: dGeomID, Callback: dTriCallback);
}
extern "C" {
    pub fn dGeomTriMeshGetCallback(g: dGeomID) -> dTriCallback;
}
pub type dTriArrayCallback =
    ::std::option::Option<unsafe extern "C" fn(TriMesh: dGeomID,
                                               RefObject: dGeomID,
                                               TriIndices:
                                                   *const ::std::os::raw::c_int,
                                               TriCount:
                                                   ::std::os::raw::c_int)>;
extern "C" {
    pub fn dGeomTriMeshSetArrayCallback(g: dGeomID,
                                        ArrayCallback: dTriArrayCallback);
}
extern "C" {
    pub fn dGeomTriMeshGetArrayCallback(g: dGeomID) -> dTriArrayCallback;
}
pub type dTriRayCallback =
    ::std::option::Option<unsafe extern "C" fn(TriMesh: dGeomID, Ray: dGeomID,
                                               TriangleIndex:
                                                   ::std::os::raw::c_int,
                                               u: dReal, v: dReal)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn dGeomTriMeshSetRayCallback(g: dGeomID, Callback: dTriRayCallback);
}
extern "C" {
    pub fn dGeomTriMeshGetRayCallback(g: dGeomID) -> dTriRayCallback;
}
pub type dTriTriMergeCallback =
    ::std::option::Option<unsafe extern "C" fn(TriMesh: dGeomID,
                                               FirstTriangleIndex:
                                                   ::std::os::raw::c_int,
                                               SecondTriangleIndex:
                                                   ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn dGeomTriMeshSetTriMergeCallback(g: dGeomID,
                                           Callback: dTriTriMergeCallback);
}
extern "C" {
    pub fn dGeomTriMeshGetTriMergeCallback(g: dGeomID)
     -> dTriTriMergeCallback;
}
extern "C" {
    pub fn dCreateTriMesh(space: dSpaceID, Data: dTriMeshDataID,
                          Callback: dTriCallback,
                          ArrayCallback: dTriArrayCallback,
                          RayCallback: dTriRayCallback) -> dGeomID;
}
extern "C" {
    pub fn dGeomTriMeshSetData(g: dGeomID, Data: dTriMeshDataID);
}
extern "C" {
    pub fn dGeomTriMeshGetData(g: dGeomID) -> dTriMeshDataID;
}
extern "C" {
    pub fn dGeomTriMeshEnableTC(g: dGeomID, geomClass: ::std::os::raw::c_int,
                                enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dGeomTriMeshIsTCEnabled(g: dGeomID,
                                   geomClass: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dGeomTriMeshClearTCCache(g: dGeomID);
}
extern "C" {
    pub fn dGeomTriMeshGetTriMeshDataID(g: dGeomID) -> dTriMeshDataID;
}
extern "C" {
    pub fn dGeomTriMeshGetTriangle(g: dGeomID, Index: ::std::os::raw::c_int,
                                   v0: *mut dVector3, v1: *mut dVector3,
                                   v2: *mut dVector3);
}
extern "C" {
    pub fn dGeomTriMeshGetPoint(g: dGeomID, Index: ::std::os::raw::c_int,
                                u: dReal, v: dReal, Out: *mut dReal);
}
extern "C" {
    pub fn dGeomTriMeshGetTriangleCount(g: dGeomID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dGeomTriMeshDataUpdate(g: dTriMeshDataID);
}
extern "C" {
    pub fn dCreateGeomTransform(space: dSpaceID) -> dGeomID;
}
extern "C" {
    pub fn dGeomTransformSetGeom(g: dGeomID, obj: dGeomID);
}
extern "C" {
    pub fn dGeomTransformGetGeom(g: dGeomID) -> dGeomID;
}
extern "C" {
    pub fn dGeomTransformSetCleanup(g: dGeomID, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dGeomTransformGetCleanup(g: dGeomID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dGeomTransformSetInfo(g: dGeomID, mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dGeomTransformGetInfo(g: dGeomID) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dxHeightfieldData {
    pub _address: u8,
}
impl Clone for dxHeightfieldData {
    fn clone(&self) -> Self { *self }
}
pub type dHeightfieldDataID = *mut dxHeightfieldData;
pub type dHeightfieldGetHeight =
    ::std::option::Option<unsafe extern "C" fn(p_user_data:
                                                   *mut ::std::os::raw::c_void,
                                               x: ::std::os::raw::c_int,
                                               z: ::std::os::raw::c_int)
                              -> dReal>;
extern "C" {
    pub fn dCreateHeightfield(space: dSpaceID, data: dHeightfieldDataID,
                              bPlaceable: ::std::os::raw::c_int) -> dGeomID;
}
extern "C" {
    pub fn dGeomHeightfieldDataCreate() -> dHeightfieldDataID;
}
extern "C" {
    pub fn dGeomHeightfieldDataDestroy(d: dHeightfieldDataID);
}
extern "C" {
    pub fn dGeomHeightfieldDataBuildCallback(d: dHeightfieldDataID,
                                             pUserData:
                                                 *mut ::std::os::raw::c_void,
                                             pCallback: dHeightfieldGetHeight,
                                             width: dReal, depth: dReal,
                                             widthSamples:
                                                 ::std::os::raw::c_int,
                                             depthSamples:
                                                 ::std::os::raw::c_int,
                                             scale: dReal, offset: dReal,
                                             thickness: dReal,
                                             bWrap: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dGeomHeightfieldDataBuildByte(d: dHeightfieldDataID,
                                         pHeightData:
                                             *const ::std::os::raw::c_uchar,
                                         bCopyHeightData:
                                             ::std::os::raw::c_int,
                                         width: dReal, depth: dReal,
                                         widthSamples: ::std::os::raw::c_int,
                                         depthSamples: ::std::os::raw::c_int,
                                         scale: dReal, offset: dReal,
                                         thickness: dReal,
                                         bWrap: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dGeomHeightfieldDataBuildShort(d: dHeightfieldDataID,
                                          pHeightData:
                                              *const ::std::os::raw::c_short,
                                          bCopyHeightData:
                                              ::std::os::raw::c_int,
                                          width: dReal, depth: dReal,
                                          widthSamples: ::std::os::raw::c_int,
                                          depthSamples: ::std::os::raw::c_int,
                                          scale: dReal, offset: dReal,
                                          thickness: dReal,
                                          bWrap: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dGeomHeightfieldDataBuildSingle(d: dHeightfieldDataID,
                                           pHeightData: *const f32,
                                           bCopyHeightData:
                                               ::std::os::raw::c_int,
                                           width: dReal, depth: dReal,
                                           widthSamples:
                                               ::std::os::raw::c_int,
                                           depthSamples:
                                               ::std::os::raw::c_int,
                                           scale: dReal, offset: dReal,
                                           thickness: dReal,
                                           bWrap: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dGeomHeightfieldDataBuildDouble(d: dHeightfieldDataID,
                                           pHeightData: *const f64,
                                           bCopyHeightData:
                                               ::std::os::raw::c_int,
                                           width: dReal, depth: dReal,
                                           widthSamples:
                                               ::std::os::raw::c_int,
                                           depthSamples:
                                               ::std::os::raw::c_int,
                                           scale: dReal, offset: dReal,
                                           thickness: dReal,
                                           bWrap: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dGeomHeightfieldDataSetBounds(d: dHeightfieldDataID,
                                         minHeight: dReal, maxHeight: dReal);
}
extern "C" {
    pub fn dGeomHeightfieldSetHeightfieldData(g: dGeomID,
                                              d: dHeightfieldDataID);
}
extern "C" {
    pub fn dGeomHeightfieldGetHeightfieldData(g: dGeomID)
     -> dHeightfieldDataID;
}
extern "C" {
    pub fn dClosestLineSegmentPoints(a1: *const dReal, a2: *const dReal,
                                     b1: *const dReal, b2: *const dReal,
                                     cp1: *mut dReal, cp2: *mut dReal);
}
extern "C" {
    pub fn dBoxTouchesBox(_p1: *const dReal, R1: *const dReal,
                          side1: *const dReal, _p2: *const dReal,
                          R2: *const dReal, side2: *const dReal)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dBoxBox(p1: *const dReal, R1: *const dReal, side1: *const dReal,
                   p2: *const dReal, R2: *const dReal, side2: *const dReal,
                   normal: *mut dReal, depth: *mut dReal,
                   return_code: *mut ::std::os::raw::c_int,
                   flags: ::std::os::raw::c_int, contact: *mut dContactGeom,
                   skip: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dInfiniteAABB(geom: dGeomID, aabb: *mut dReal);
}
pub type dGetAABBFn =
    ::std::option::Option<unsafe extern "C" fn(arg1: dGeomID,
                                               aabb: *mut dReal)>;
pub type dColliderFn =
    ::std::option::Option<unsafe extern "C" fn(o1: dGeomID, o2: dGeomID,
                                               flags: ::std::os::raw::c_int,
                                               contact: *mut dContactGeom,
                                               skip: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type dGetColliderFnFn =
    ::std::option::Option<unsafe extern "C" fn(num: ::std::os::raw::c_int)
                              -> dColliderFn>;
pub type dGeomDtorFn =
    ::std::option::Option<unsafe extern "C" fn(o: dGeomID)>;
pub type dAABBTestFn =
    ::std::option::Option<unsafe extern "C" fn(o1: dGeomID, o2: dGeomID,
                                               aabb: *mut dReal)
                              -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dGeomClass {
    pub bytes: ::std::os::raw::c_int,
    pub collider: dGetColliderFnFn,
    pub aabb: dGetAABBFn,
    pub aabb_test: dAABBTestFn,
    pub dtor: dGeomDtorFn,
}
#[test]
fn bindgen_test_layout_dGeomClass() {
    assert_eq!(::std::mem::size_of::<dGeomClass>() , 40usize);
    assert_eq!(::std::mem::align_of::<dGeomClass>() , 8usize);
}
impl Clone for dGeomClass {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn dCreateGeomClass(classptr: *const dGeomClass)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dGeomGetClassData(arg1: dGeomID) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dCreateGeom(classnum: ::std::os::raw::c_int) -> dGeomID;
}
extern "C" {
    pub fn dSetColliderOverride(i: ::std::os::raw::c_int,
                                j: ::std::os::raw::c_int, fn_: dColliderFn);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dxThreadingThreadPool {
    pub _address: u8,
}
impl Clone for dxThreadingThreadPool {
    fn clone(&self) -> Self { *self }
}
pub type dThreadingThreadPoolID = *mut dxThreadingThreadPool;
extern "C" {
    pub fn dThreadingAllocateMultiThreadedImplementation()
     -> dThreadingImplementationID;
}
extern "C" {
    pub fn dThreadingImplementationGetFunctions(impl_:
                                                    dThreadingImplementationID)
     -> *const dThreadingFunctionsInfo;
}
extern "C" {
    pub fn dThreadingImplementationShutdownProcessing(impl_:
                                                          dThreadingImplementationID);
}
extern "C" {
    pub fn dThreadingImplementationCleanupForRestart(impl_:
                                                         dThreadingImplementationID);
}
extern "C" {
    pub fn dThreadingFreeImplementation(impl_: dThreadingImplementationID);
}
pub type dThreadReadyToServeCallback =
    ::std::option::Option<unsafe extern "C" fn(callback_context:
                                                   *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn dExternalThreadingServeMultiThreadedImplementation(impl_:
                                                                  dThreadingImplementationID,
                                                              readiness_callback:
                                                                  dThreadReadyToServeCallback,
                                                              callback_context:
                                                                  *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dThreadingAllocateThreadPool(thread_count: ::std::os::raw::c_uint,
                                        stack_size: usize,
                                        ode_data_allocate_flags:
                                            ::std::os::raw::c_uint,
                                        reserved: *mut ::std::os::raw::c_void)
     -> dThreadingThreadPoolID;
}
extern "C" {
    pub fn dThreadingThreadPoolServeMultiThreadedImplementation(pool:
                                                                    dThreadingThreadPoolID,
                                                                impl_:
                                                                    dThreadingImplementationID);
}
extern "C" {
    pub fn dThreadingThreadPoolWaitIdleState(pool: dThreadingThreadPoolID);
}
extern "C" {
    pub fn dThreadingFreeThreadPool(pool: dThreadingThreadPoolID);
}
extern "C" {
    pub fn dWorldExportDIF(w: dWorldID, file: *mut FILE,
                           world_name: *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
